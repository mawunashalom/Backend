/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { HistoriqueActionService } from "../historiqueAction.service";
import { HistoriqueActionCreateInput } from "./HistoriqueActionCreateInput";
import { HistoriqueAction } from "./HistoriqueAction";
import { HistoriqueActionFindManyArgs } from "./HistoriqueActionFindManyArgs";
import { HistoriqueActionWhereUniqueInput } from "./HistoriqueActionWhereUniqueInput";
import { HistoriqueActionUpdateInput } from "./HistoriqueActionUpdateInput";

export class HistoriqueActionControllerBase {
  constructor(protected readonly service: HistoriqueActionService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: HistoriqueAction })
  async createHistoriqueAction(
    @common.Body() data: HistoriqueActionCreateInput
  ): Promise<HistoriqueAction> {
    return await this.service.createHistoriqueAction({
      data: {
        ...data,

        utilisateur: {
          connect: data.utilisateur,
        },
      },
      select: {
        action: true,
        createdAt: true,
        id: true,

        utilisateur: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [HistoriqueAction] })
  @ApiNestedQuery(HistoriqueActionFindManyArgs)
  async historiqueActions(
    @common.Req() request: Request
  ): Promise<HistoriqueAction[]> {
    const args = plainToClass(HistoriqueActionFindManyArgs, request.query);
    return this.service.historiqueActions({
      ...args,
      select: {
        action: true,
        createdAt: true,
        id: true,

        utilisateur: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: HistoriqueAction })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async historiqueAction(
    @common.Param() params: HistoriqueActionWhereUniqueInput
  ): Promise<HistoriqueAction | null> {
    const result = await this.service.historiqueAction({
      where: params,
      select: {
        action: true,
        createdAt: true,
        id: true,

        utilisateur: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: HistoriqueAction })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateHistoriqueAction(
    @common.Param() params: HistoriqueActionWhereUniqueInput,
    @common.Body() data: HistoriqueActionUpdateInput
  ): Promise<HistoriqueAction | null> {
    try {
      return await this.service.updateHistoriqueAction({
        where: params,
        data: {
          ...data,

          utilisateur: {
            connect: data.utilisateur,
          },
        },
        select: {
          action: true,
          createdAt: true,
          id: true,

          utilisateur: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: HistoriqueAction })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteHistoriqueAction(
    @common.Param() params: HistoriqueActionWhereUniqueInput
  ): Promise<HistoriqueAction | null> {
    try {
      return await this.service.deleteHistoriqueAction({
        where: params,
        select: {
          action: true,
          createdAt: true,
          id: true,

          utilisateur: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}

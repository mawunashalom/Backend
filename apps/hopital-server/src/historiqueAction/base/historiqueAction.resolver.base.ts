/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { HistoriqueAction } from "./HistoriqueAction";
import { HistoriqueActionCountArgs } from "./HistoriqueActionCountArgs";
import { HistoriqueActionFindManyArgs } from "./HistoriqueActionFindManyArgs";
import { HistoriqueActionFindUniqueArgs } from "./HistoriqueActionFindUniqueArgs";
import { CreateHistoriqueActionArgs } from "./CreateHistoriqueActionArgs";
import { UpdateHistoriqueActionArgs } from "./UpdateHistoriqueActionArgs";
import { DeleteHistoriqueActionArgs } from "./DeleteHistoriqueActionArgs";
import { Utilisateur } from "../../utilisateur/base/Utilisateur";
import { HistoriqueActionService } from "../historiqueAction.service";
@graphql.Resolver(() => HistoriqueAction)
export class HistoriqueActionResolverBase {
  constructor(protected readonly service: HistoriqueActionService) {}

  async _historiqueActionsMeta(
    @graphql.Args() args: HistoriqueActionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [HistoriqueAction])
  async historiqueActions(
    @graphql.Args() args: HistoriqueActionFindManyArgs
  ): Promise<HistoriqueAction[]> {
    return this.service.historiqueActions(args);
  }

  @graphql.Query(() => HistoriqueAction, { nullable: true })
  async historiqueAction(
    @graphql.Args() args: HistoriqueActionFindUniqueArgs
  ): Promise<HistoriqueAction | null> {
    const result = await this.service.historiqueAction(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => HistoriqueAction)
  async createHistoriqueAction(
    @graphql.Args() args: CreateHistoriqueActionArgs
  ): Promise<HistoriqueAction> {
    return await this.service.createHistoriqueAction({
      ...args,
      data: {
        ...args.data,

        utilisateur: {
          connect: args.data.utilisateur,
        },
      },
    });
  }

  @graphql.Mutation(() => HistoriqueAction)
  async updateHistoriqueAction(
    @graphql.Args() args: UpdateHistoriqueActionArgs
  ): Promise<HistoriqueAction | null> {
    try {
      return await this.service.updateHistoriqueAction({
        ...args,
        data: {
          ...args.data,

          utilisateur: {
            connect: args.data.utilisateur,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => HistoriqueAction)
  async deleteHistoriqueAction(
    @graphql.Args() args: DeleteHistoriqueActionArgs
  ): Promise<HistoriqueAction | null> {
    try {
      return await this.service.deleteHistoriqueAction(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Utilisateur, {
    nullable: true,
    name: "utilisateur",
  })
  async getUtilisateur(
    @graphql.Parent() parent: HistoriqueAction
  ): Promise<Utilisateur | null> {
    const result = await this.service.getUtilisateur(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}

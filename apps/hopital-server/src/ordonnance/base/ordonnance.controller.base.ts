/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { OrdonnanceService } from "../ordonnance.service";
import { OrdonnanceCreateInput } from "./OrdonnanceCreateInput";
import { Ordonnance } from "./Ordonnance";
import { OrdonnanceFindManyArgs } from "./OrdonnanceFindManyArgs";
import { OrdonnanceWhereUniqueInput } from "./OrdonnanceWhereUniqueInput";
import { OrdonnanceUpdateInput } from "./OrdonnanceUpdateInput";
import { LigneOrdonnanceFindManyArgs } from "../../ligneOrdonnance/base/LigneOrdonnanceFindManyArgs";
import { LigneOrdonnance } from "../../ligneOrdonnance/base/LigneOrdonnance";
import { LigneOrdonnanceWhereUniqueInput } from "../../ligneOrdonnance/base/LigneOrdonnanceWhereUniqueInput";

export class OrdonnanceControllerBase {
  constructor(protected readonly service: OrdonnanceService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Ordonnance })
  async createOrdonnance(
    @common.Body() data: OrdonnanceCreateInput
  ): Promise<Ordonnance> {
    return await this.service.createOrdonnance({
      data: {
        ...data,

        dossier: {
          connect: data.dossier,
        },

        utilisateur: {
          connect: data.utilisateur,
        },
      },
      select: {
        createdAt: true,

        dossier: {
          select: {
            id: true,
          },
        },

        id: true,
        statut: true,

        utilisateur: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Ordonnance] })
  @ApiNestedQuery(OrdonnanceFindManyArgs)
  async ordonnances(@common.Req() request: Request): Promise<Ordonnance[]> {
    const args = plainToClass(OrdonnanceFindManyArgs, request.query);
    return this.service.ordonnances({
      ...args,
      select: {
        createdAt: true,

        dossier: {
          select: {
            id: true,
          },
        },

        id: true,
        statut: true,

        utilisateur: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Ordonnance })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async ordonnance(
    @common.Param() params: OrdonnanceWhereUniqueInput
  ): Promise<Ordonnance | null> {
    const result = await this.service.ordonnance({
      where: params,
      select: {
        createdAt: true,

        dossier: {
          select: {
            id: true,
          },
        },

        id: true,
        statut: true,

        utilisateur: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Ordonnance })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateOrdonnance(
    @common.Param() params: OrdonnanceWhereUniqueInput,
    @common.Body() data: OrdonnanceUpdateInput
  ): Promise<Ordonnance | null> {
    try {
      return await this.service.updateOrdonnance({
        where: params,
        data: {
          ...data,

          dossier: {
            connect: data.dossier,
          },

          utilisateur: {
            connect: data.utilisateur,
          },
        },
        select: {
          createdAt: true,

          dossier: {
            select: {
              id: true,
            },
          },

          id: true,
          statut: true,

          utilisateur: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Ordonnance })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteOrdonnance(
    @common.Param() params: OrdonnanceWhereUniqueInput
  ): Promise<Ordonnance | null> {
    try {
      return await this.service.deleteOrdonnance({
        where: params,
        select: {
          createdAt: true,

          dossier: {
            select: {
              id: true,
            },
          },

          id: true,
          statut: true,

          utilisateur: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/lignes")
  @ApiNestedQuery(LigneOrdonnanceFindManyArgs)
  async findLignes(
    @common.Req() request: Request,
    @common.Param() params: OrdonnanceWhereUniqueInput
  ): Promise<LigneOrdonnance[]> {
    const query = plainToClass(LigneOrdonnanceFindManyArgs, request.query);
    const results = await this.service.findLignes(params.id, {
      ...query,
      select: {
        id: true,

        medicament: {
          select: {
            id: true,
          },
        },

        ordonnance: {
          select: {
            id: true,
          },
        },

        quantite: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/lignes")
  async connectLignes(
    @common.Param() params: OrdonnanceWhereUniqueInput,
    @common.Body() body: LigneOrdonnanceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      lignes: {
        connect: body,
      },
    };
    await this.service.updateOrdonnance({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/lignes")
  async updateLignes(
    @common.Param() params: OrdonnanceWhereUniqueInput,
    @common.Body() body: LigneOrdonnanceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      lignes: {
        set: body,
      },
    };
    await this.service.updateOrdonnance({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/lignes")
  async disconnectLignes(
    @common.Param() params: OrdonnanceWhereUniqueInput,
    @common.Body() body: LigneOrdonnanceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      lignes: {
        disconnect: body,
      },
    };
    await this.service.updateOrdonnance({
      where: params,
      data,
      select: { id: true },
    });
  }
}

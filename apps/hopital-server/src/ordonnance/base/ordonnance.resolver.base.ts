/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Ordonnance } from "./Ordonnance";
import { OrdonnanceCountArgs } from "./OrdonnanceCountArgs";
import { OrdonnanceFindManyArgs } from "./OrdonnanceFindManyArgs";
import { OrdonnanceFindUniqueArgs } from "./OrdonnanceFindUniqueArgs";
import { CreateOrdonnanceArgs } from "./CreateOrdonnanceArgs";
import { UpdateOrdonnanceArgs } from "./UpdateOrdonnanceArgs";
import { DeleteOrdonnanceArgs } from "./DeleteOrdonnanceArgs";
import { LigneOrdonnanceFindManyArgs } from "../../ligneOrdonnance/base/LigneOrdonnanceFindManyArgs";
import { LigneOrdonnance } from "../../ligneOrdonnance/base/LigneOrdonnance";
import { DossierMedical } from "../../dossierMedical/base/DossierMedical";
import { Utilisateur } from "../../utilisateur/base/Utilisateur";
import { OrdonnanceService } from "../ordonnance.service";
@graphql.Resolver(() => Ordonnance)
export class OrdonnanceResolverBase {
  constructor(protected readonly service: OrdonnanceService) {}

  async _ordonnancesMeta(
    @graphql.Args() args: OrdonnanceCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Ordonnance])
  async ordonnances(
    @graphql.Args() args: OrdonnanceFindManyArgs
  ): Promise<Ordonnance[]> {
    return this.service.ordonnances(args);
  }

  @graphql.Query(() => Ordonnance, { nullable: true })
  async ordonnance(
    @graphql.Args() args: OrdonnanceFindUniqueArgs
  ): Promise<Ordonnance | null> {
    const result = await this.service.ordonnance(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Ordonnance)
  async createOrdonnance(
    @graphql.Args() args: CreateOrdonnanceArgs
  ): Promise<Ordonnance> {
    return await this.service.createOrdonnance({
      ...args,
      data: {
        ...args.data,

        dossier: {
          connect: args.data.dossier,
        },

        utilisateur: {
          connect: args.data.utilisateur,
        },
      },
    });
  }

  @graphql.Mutation(() => Ordonnance)
  async updateOrdonnance(
    @graphql.Args() args: UpdateOrdonnanceArgs
  ): Promise<Ordonnance | null> {
    try {
      return await this.service.updateOrdonnance({
        ...args,
        data: {
          ...args.data,

          dossier: {
            connect: args.data.dossier,
          },

          utilisateur: {
            connect: args.data.utilisateur,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Ordonnance)
  async deleteOrdonnance(
    @graphql.Args() args: DeleteOrdonnanceArgs
  ): Promise<Ordonnance | null> {
    try {
      return await this.service.deleteOrdonnance(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [LigneOrdonnance], { name: "lignes" })
  async findLignes(
    @graphql.Parent() parent: Ordonnance,
    @graphql.Args() args: LigneOrdonnanceFindManyArgs
  ): Promise<LigneOrdonnance[]> {
    const results = await this.service.findLignes(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => DossierMedical, {
    nullable: true,
    name: "dossier",
  })
  async getDossier(
    @graphql.Parent() parent: Ordonnance
  ): Promise<DossierMedical | null> {
    const result = await this.service.getDossier(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Utilisateur, {
    nullable: true,
    name: "utilisateur",
  })
  async getUtilisateur(
    @graphql.Parent() parent: Ordonnance
  ): Promise<Utilisateur | null> {
    const result = await this.service.getUtilisateur(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}

/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Ordonnance as PrismaOrdonnance,
  LigneOrdonnance as PrismaLigneOrdonnance,
  DossierMedical as PrismaDossierMedical,
  Utilisateur as PrismaUtilisateur,
} from "@prisma/client";

export class OrdonnanceServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.OrdonnanceCountArgs, "select">
  ): Promise<number> {
    return this.prisma.ordonnance.count(args);
  }

  async ordonnances(
    args: Prisma.OrdonnanceFindManyArgs
  ): Promise<PrismaOrdonnance[]> {
    return this.prisma.ordonnance.findMany(args);
  }
  async ordonnance(
    args: Prisma.OrdonnanceFindUniqueArgs
  ): Promise<PrismaOrdonnance | null> {
    return this.prisma.ordonnance.findUnique(args);
  }
  async createOrdonnance(
    args: Prisma.OrdonnanceCreateArgs
  ): Promise<PrismaOrdonnance> {
    return this.prisma.ordonnance.create(args);
  }
  async updateOrdonnance(
    args: Prisma.OrdonnanceUpdateArgs
  ): Promise<PrismaOrdonnance> {
    return this.prisma.ordonnance.update(args);
  }
  async deleteOrdonnance(
    args: Prisma.OrdonnanceDeleteArgs
  ): Promise<PrismaOrdonnance> {
    return this.prisma.ordonnance.delete(args);
  }

  async findLignes(
    parentId: number,
    args: Prisma.LigneOrdonnanceFindManyArgs
  ): Promise<PrismaLigneOrdonnance[]> {
    return this.prisma.ordonnance
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .lignes(args);
  }

  async getDossier(parentId: number): Promise<PrismaDossierMedical | null> {
    return this.prisma.ordonnance
      .findUnique({
        where: { id: parentId },
      })
      .dossier();
  }

  async getUtilisateur(parentId: number): Promise<PrismaUtilisateur | null> {
    return this.prisma.ordonnance
      .findUnique({
        where: { id: parentId },
      })
      .utilisateur();
  }
}

/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Dgtcp } from "./Dgtcp";
import { DgtcpCountArgs } from "./DgtcpCountArgs";
import { DgtcpFindManyArgs } from "./DgtcpFindManyArgs";
import { DgtcpFindUniqueArgs } from "./DgtcpFindUniqueArgs";
import { CreateDgtcpArgs } from "./CreateDgtcpArgs";
import { UpdateDgtcpArgs } from "./UpdateDgtcpArgs";
import { DeleteDgtcpArgs } from "./DeleteDgtcpArgs";
import { Utilisateur } from "../../utilisateur/base/Utilisateur";
import { DgtcpService } from "../dgtcp.service";
@graphql.Resolver(() => Dgtcp)
export class DgtcpResolverBase {
  constructor(protected readonly service: DgtcpService) {}

  async _dgtcpsMeta(
    @graphql.Args() args: DgtcpCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Dgtcp])
  async dgtcps(@graphql.Args() args: DgtcpFindManyArgs): Promise<Dgtcp[]> {
    return this.service.dgtcps(args);
  }

  @graphql.Query(() => Dgtcp, { nullable: true })
  async dgtcp(
    @graphql.Args() args: DgtcpFindUniqueArgs
  ): Promise<Dgtcp | null> {
    const result = await this.service.dgtcp(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Dgtcp)
  async createDgtcp(@graphql.Args() args: CreateDgtcpArgs): Promise<Dgtcp> {
    return await this.service.createDgtcp({
      ...args,
      data: {
        ...args.data,

        utilisateur: {
          connect: args.data.utilisateur,
        },
      },
    });
  }

  @graphql.Mutation(() => Dgtcp)
  async updateDgtcp(
    @graphql.Args() args: UpdateDgtcpArgs
  ): Promise<Dgtcp | null> {
    try {
      return await this.service.updateDgtcp({
        ...args,
        data: {
          ...args.data,

          utilisateur: {
            connect: args.data.utilisateur,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Dgtcp)
  async deleteDgtcp(
    @graphql.Args() args: DeleteDgtcpArgs
  ): Promise<Dgtcp | null> {
    try {
      return await this.service.deleteDgtcp(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Utilisateur, {
    nullable: true,
    name: "utilisateur",
  })
  async getUtilisateur(
    @graphql.Parent() parent: Dgtcp
  ): Promise<Utilisateur | null> {
    const result = await this.service.getUtilisateur(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}

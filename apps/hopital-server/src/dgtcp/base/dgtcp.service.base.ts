/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Dgtcp as PrismaDgtcp,
  Utilisateur as PrismaUtilisateur,
} from "@prisma/client";

export class DgtcpServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.DgtcpCountArgs, "select">): Promise<number> {
    return this.prisma.dgtcp.count(args);
  }

  async dgtcps(args: Prisma.DgtcpFindManyArgs): Promise<PrismaDgtcp[]> {
    return this.prisma.dgtcp.findMany(args);
  }
  async dgtcp(args: Prisma.DgtcpFindUniqueArgs): Promise<PrismaDgtcp | null> {
    return this.prisma.dgtcp.findUnique(args);
  }
  async createDgtcp(args: Prisma.DgtcpCreateArgs): Promise<PrismaDgtcp> {
    return this.prisma.dgtcp.create(args);
  }
  async updateDgtcp(args: Prisma.DgtcpUpdateArgs): Promise<PrismaDgtcp> {
    return this.prisma.dgtcp.update(args);
  }
  async deleteDgtcp(args: Prisma.DgtcpDeleteArgs): Promise<PrismaDgtcp> {
    return this.prisma.dgtcp.delete(args);
  }

  async getUtilisateur(parentId: number): Promise<PrismaUtilisateur | null> {
    return this.prisma.dgtcp
      .findUnique({
        where: { id: parentId },
      })
      .utilisateur();
  }
}

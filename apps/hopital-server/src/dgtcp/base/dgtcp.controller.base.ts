/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DgtcpService } from "../dgtcp.service";
import { DgtcpCreateInput } from "./DgtcpCreateInput";
import { Dgtcp } from "./Dgtcp";
import { DgtcpFindManyArgs } from "./DgtcpFindManyArgs";
import { DgtcpWhereUniqueInput } from "./DgtcpWhereUniqueInput";
import { DgtcpUpdateInput } from "./DgtcpUpdateInput";

export class DgtcpControllerBase {
  constructor(protected readonly service: DgtcpService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Dgtcp })
  async createDgtcp(@common.Body() data: DgtcpCreateInput): Promise<Dgtcp> {
    return await this.service.createDgtcp({
      data: {
        ...data,

        utilisateur: {
          connect: data.utilisateur,
        },
      },
      select: {
        id: true,

        utilisateur: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Dgtcp] })
  @ApiNestedQuery(DgtcpFindManyArgs)
  async dgtcps(@common.Req() request: Request): Promise<Dgtcp[]> {
    const args = plainToClass(DgtcpFindManyArgs, request.query);
    return this.service.dgtcps({
      ...args,
      select: {
        id: true,

        utilisateur: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Dgtcp })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async dgtcp(
    @common.Param() params: DgtcpWhereUniqueInput
  ): Promise<Dgtcp | null> {
    const result = await this.service.dgtcp({
      where: params,
      select: {
        id: true,

        utilisateur: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Dgtcp })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDgtcp(
    @common.Param() params: DgtcpWhereUniqueInput,
    @common.Body() data: DgtcpUpdateInput
  ): Promise<Dgtcp | null> {
    try {
      return await this.service.updateDgtcp({
        where: params,
        data: {
          ...data,

          utilisateur: {
            connect: data.utilisateur,
          },
        },
        select: {
          id: true,

          utilisateur: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Dgtcp })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDgtcp(
    @common.Param() params: DgtcpWhereUniqueInput
  ): Promise<Dgtcp | null> {
    try {
      return await this.service.deleteDgtcp({
        where: params,
        select: {
          id: true,

          utilisateur: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}

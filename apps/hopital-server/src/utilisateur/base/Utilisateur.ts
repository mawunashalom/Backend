/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import {
  IsDate,
  ValidateNested,
  IsOptional,
  IsString,
  MaxLength,
  IsInt,
  IsEnum,
} from "class-validator";
import { Type } from "class-transformer";
import { Depense } from "../../depense/base/Depense";
import { Dgtcp } from "../../dgtcp/base/Dgtcp";
import { DossierMedical } from "../../dossierMedical/base/DossierMedical";
import { HistoriqueAction } from "../../historiqueAction/base/HistoriqueAction";
import { Hopital } from "../../hopital/base/Hopital";
import { Ordonnance } from "../../ordonnance/base/Ordonnance";
import { Patient } from "../../patient/base/Patient";
import { RendezVous } from "../../rendezVous/base/RendezVous";
import { RetraitStock } from "../../retraitStock/base/RetraitStock";
import { EnumUtilisateurRole } from "./EnumUtilisateurRole";
import { EnumUtilisateurStatut } from "./EnumUtilisateurStatut";

@ObjectType()
class Utilisateur {
  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  createdAt!: Date;

  @ApiProperty({
    required: false,
    type: () => [Depense],
  })
  @ValidateNested()
  @Type(() => Depense)
  @IsOptional()
  depenses?: Array<Depense>;

  @ApiProperty({
    required: false,
    type: () => Dgtcp,
  })
  @ValidateNested()
  @Type(() => Dgtcp)
  @IsOptional()
  dgtcp?: Dgtcp | null;

  @ApiProperty({
    required: false,
    type: () => [DossierMedical],
  })
  @ValidateNested()
  @Type(() => DossierMedical)
  @IsOptional()
  dossiersMedicaux?: Array<DossierMedical>;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @Field(() => String)
  email!: string;

  @ApiProperty({
    required: false,
    type: () => [HistoriqueAction],
  })
  @ValidateNested()
  @Type(() => HistoriqueAction)
  @IsOptional()
  historiques?: Array<HistoriqueAction>;

  @ApiProperty({
    required: false,
    type: () => Hopital,
  })
  @ValidateNested()
  @Type(() => Hopital)
  @IsOptional()
  hopital?: Hopital | null;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsInt()
  @Field(() => Number)
  id!: number;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @Field(() => String)
  motDePasse!: string;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @Field(() => String)
  nom!: string;

  @ApiProperty({
    required: false,
    type: () => [Ordonnance],
  })
  @ValidateNested()
  @Type(() => Ordonnance)
  @IsOptional()
  ordonnances?: Array<Ordonnance>;

  @ApiProperty({
    required: false,
    type: () => [Patient],
  })
  @ValidateNested()
  @Type(() => Patient)
  @IsOptional()
  patients?: Array<Patient>;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @Field(() => String)
  prenom!: string;

  @ApiProperty({
    required: false,
    type: () => [RendezVous],
  })
  @ValidateNested()
  @Type(() => RendezVous)
  @IsOptional()
  rendezVous?: Array<RendezVous>;

  @ApiProperty({
    required: false,
    type: () => [RetraitStock],
  })
  @ValidateNested()
  @Type(() => RetraitStock)
  @IsOptional()
  retraitsStock?: Array<RetraitStock>;

  @ApiProperty({
    required: true,
    enum: EnumUtilisateurRole,
  })
  @IsEnum(EnumUtilisateurRole)
  @Field(() => EnumUtilisateurRole, {
    nullable: true,
  })
  role?:
    | "SUPER_ADMIN"
    | "ADMIN"
    | "MEDECIN"
    | "PHARMACIEN"
    | "ACCUEIL"
    | "COMPTABLE"
    | "DGTCP";

  @ApiProperty({
    required: true,
    enum: EnumUtilisateurStatut,
  })
  @IsEnum(EnumUtilisateurStatut)
  @Field(() => EnumUtilisateurStatut, {
    nullable: true,
  })
  statut?: "Actif" | "Inactif";

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  updatedAt!: Date;
}

export { Utilisateur as Utilisateur };

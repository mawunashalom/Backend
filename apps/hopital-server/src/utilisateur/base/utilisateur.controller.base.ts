/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { UtilisateurService } from "../utilisateur.service";
import { UtilisateurCreateInput } from "./UtilisateurCreateInput";
import { Utilisateur } from "./Utilisateur";
import { UtilisateurFindManyArgs } from "./UtilisateurFindManyArgs";
import { UtilisateurWhereUniqueInput } from "./UtilisateurWhereUniqueInput";
import { UtilisateurUpdateInput } from "./UtilisateurUpdateInput";
import { DepenseFindManyArgs } from "../../depense/base/DepenseFindManyArgs";
import { Depense } from "../../depense/base/Depense";
import { DepenseWhereUniqueInput } from "../../depense/base/DepenseWhereUniqueInput";
import { DossierMedicalFindManyArgs } from "../../dossierMedical/base/DossierMedicalFindManyArgs";
import { DossierMedical } from "../../dossierMedical/base/DossierMedical";
import { DossierMedicalWhereUniqueInput } from "../../dossierMedical/base/DossierMedicalWhereUniqueInput";
import { HistoriqueActionFindManyArgs } from "../../historiqueAction/base/HistoriqueActionFindManyArgs";
import { HistoriqueAction } from "../../historiqueAction/base/HistoriqueAction";
import { HistoriqueActionWhereUniqueInput } from "../../historiqueAction/base/HistoriqueActionWhereUniqueInput";
import { OrdonnanceFindManyArgs } from "../../ordonnance/base/OrdonnanceFindManyArgs";
import { Ordonnance } from "../../ordonnance/base/Ordonnance";
import { OrdonnanceWhereUniqueInput } from "../../ordonnance/base/OrdonnanceWhereUniqueInput";
import { PatientFindManyArgs } from "../../patient/base/PatientFindManyArgs";
import { Patient } from "../../patient/base/Patient";
import { PatientWhereUniqueInput } from "../../patient/base/PatientWhereUniqueInput";
import { RendezVousFindManyArgs } from "../../rendezVous/base/RendezVousFindManyArgs";
import { RendezVous } from "../../rendezVous/base/RendezVous";
import { RendezVousWhereUniqueInput } from "../../rendezVous/base/RendezVousWhereUniqueInput";
import { RetraitStockFindManyArgs } from "../../retraitStock/base/RetraitStockFindManyArgs";
import { RetraitStock } from "../../retraitStock/base/RetraitStock";
import { RetraitStockWhereUniqueInput } from "../../retraitStock/base/RetraitStockWhereUniqueInput";

export class UtilisateurControllerBase {
  constructor(protected readonly service: UtilisateurService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Utilisateur })
  async createUtilisateur(
    @common.Body() data: UtilisateurCreateInput
  ): Promise<Utilisateur> {
    return await this.service.createUtilisateur({
      data: {
        ...data,

        dgtcp: data.dgtcp
          ? {
              connect: data.dgtcp,
            }
          : undefined,

        hopital: data.hopital
          ? {
              connect: data.hopital,
            }
          : undefined,
      },
      select: {
        createdAt: true,

        dgtcp: {
          select: {
            id: true,
          },
        },

        email: true,

        hopital: {
          select: {
            id: true,
          },
        },

        id: true,
        motDePasse: true,
        nom: true,
        prenom: true,
        role: true,
        statut: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Utilisateur] })
  @ApiNestedQuery(UtilisateurFindManyArgs)
  async utilisateurs(@common.Req() request: Request): Promise<Utilisateur[]> {
    const args = plainToClass(UtilisateurFindManyArgs, request.query);
    return this.service.utilisateurs({
      ...args,
      select: {
        createdAt: true,

        dgtcp: {
          select: {
            id: true,
          },
        },

        email: true,

        hopital: {
          select: {
            id: true,
          },
        },

        id: true,
        motDePasse: true,
        nom: true,
        prenom: true,
        role: true,
        statut: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Utilisateur })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async utilisateur(
    @common.Param() params: UtilisateurWhereUniqueInput
  ): Promise<Utilisateur | null> {
    const result = await this.service.utilisateur({
      where: params,
      select: {
        createdAt: true,

        dgtcp: {
          select: {
            id: true,
          },
        },

        email: true,

        hopital: {
          select: {
            id: true,
          },
        },

        id: true,
        motDePasse: true,
        nom: true,
        prenom: true,
        role: true,
        statut: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Utilisateur })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateUtilisateur(
    @common.Param() params: UtilisateurWhereUniqueInput,
    @common.Body() data: UtilisateurUpdateInput
  ): Promise<Utilisateur | null> {
    try {
      return await this.service.updateUtilisateur({
        where: params,
        data: {
          ...data,

          dgtcp: data.dgtcp
            ? {
                connect: data.dgtcp,
              }
            : undefined,

          hopital: data.hopital
            ? {
                connect: data.hopital,
              }
            : undefined,
        },
        select: {
          createdAt: true,

          dgtcp: {
            select: {
              id: true,
            },
          },

          email: true,

          hopital: {
            select: {
              id: true,
            },
          },

          id: true,
          motDePasse: true,
          nom: true,
          prenom: true,
          role: true,
          statut: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Utilisateur })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteUtilisateur(
    @common.Param() params: UtilisateurWhereUniqueInput
  ): Promise<Utilisateur | null> {
    try {
      return await this.service.deleteUtilisateur({
        where: params,
        select: {
          createdAt: true,

          dgtcp: {
            select: {
              id: true,
            },
          },

          email: true,

          hopital: {
            select: {
              id: true,
            },
          },

          id: true,
          motDePasse: true,
          nom: true,
          prenom: true,
          role: true,
          statut: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/depenses")
  @ApiNestedQuery(DepenseFindManyArgs)
  async findDepenses(
    @common.Req() request: Request,
    @common.Param() params: UtilisateurWhereUniqueInput
  ): Promise<Depense[]> {
    const query = plainToClass(DepenseFindManyArgs, request.query);
    const results = await this.service.findDepenses(params.id, {
      ...query,
      select: {
        date: true,

        hopital: {
          select: {
            id: true,
          },
        },

        id: true,
        montant: true,
        motif: true,

        utilisateur: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/depenses")
  async connectDepenses(
    @common.Param() params: UtilisateurWhereUniqueInput,
    @common.Body() body: DepenseWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      depenses: {
        connect: body,
      },
    };
    await this.service.updateUtilisateur({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/depenses")
  async updateDepenses(
    @common.Param() params: UtilisateurWhereUniqueInput,
    @common.Body() body: DepenseWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      depenses: {
        set: body,
      },
    };
    await this.service.updateUtilisateur({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/depenses")
  async disconnectDepenses(
    @common.Param() params: UtilisateurWhereUniqueInput,
    @common.Body() body: DepenseWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      depenses: {
        disconnect: body,
      },
    };
    await this.service.updateUtilisateur({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/dossiersMedicaux")
  @ApiNestedQuery(DossierMedicalFindManyArgs)
  async findDossiersMedicaux(
    @common.Req() request: Request,
    @common.Param() params: UtilisateurWhereUniqueInput
  ): Promise<DossierMedical[]> {
    const query = plainToClass(DossierMedicalFindManyArgs, request.query);
    const results = await this.service.findDossiersMedicaux(params.id, {
      ...query,
      select: {
        createdAt: true,
        description: true,
        id: true,

        patient: {
          select: {
            id: true,
          },
        },

        utilisateur: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/dossiersMedicaux")
  async connectDossiersMedicaux(
    @common.Param() params: UtilisateurWhereUniqueInput,
    @common.Body() body: DossierMedicalWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      dossiersMedicaux: {
        connect: body,
      },
    };
    await this.service.updateUtilisateur({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/dossiersMedicaux")
  async updateDossiersMedicaux(
    @common.Param() params: UtilisateurWhereUniqueInput,
    @common.Body() body: DossierMedicalWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      dossiersMedicaux: {
        set: body,
      },
    };
    await this.service.updateUtilisateur({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/dossiersMedicaux")
  async disconnectDossiersMedicaux(
    @common.Param() params: UtilisateurWhereUniqueInput,
    @common.Body() body: DossierMedicalWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      dossiersMedicaux: {
        disconnect: body,
      },
    };
    await this.service.updateUtilisateur({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/historiques")
  @ApiNestedQuery(HistoriqueActionFindManyArgs)
  async findHistoriques(
    @common.Req() request: Request,
    @common.Param() params: UtilisateurWhereUniqueInput
  ): Promise<HistoriqueAction[]> {
    const query = plainToClass(HistoriqueActionFindManyArgs, request.query);
    const results = await this.service.findHistoriques(params.id, {
      ...query,
      select: {
        action: true,
        createdAt: true,
        id: true,

        utilisateur: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/historiques")
  async connectHistoriques(
    @common.Param() params: UtilisateurWhereUniqueInput,
    @common.Body() body: HistoriqueActionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      historiques: {
        connect: body,
      },
    };
    await this.service.updateUtilisateur({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/historiques")
  async updateHistoriques(
    @common.Param() params: UtilisateurWhereUniqueInput,
    @common.Body() body: HistoriqueActionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      historiques: {
        set: body,
      },
    };
    await this.service.updateUtilisateur({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/historiques")
  async disconnectHistoriques(
    @common.Param() params: UtilisateurWhereUniqueInput,
    @common.Body() body: HistoriqueActionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      historiques: {
        disconnect: body,
      },
    };
    await this.service.updateUtilisateur({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/ordonnances")
  @ApiNestedQuery(OrdonnanceFindManyArgs)
  async findOrdonnances(
    @common.Req() request: Request,
    @common.Param() params: UtilisateurWhereUniqueInput
  ): Promise<Ordonnance[]> {
    const query = plainToClass(OrdonnanceFindManyArgs, request.query);
    const results = await this.service.findOrdonnances(params.id, {
      ...query,
      select: {
        createdAt: true,

        dossier: {
          select: {
            id: true,
          },
        },

        id: true,
        statut: true,

        utilisateur: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/ordonnances")
  async connectOrdonnances(
    @common.Param() params: UtilisateurWhereUniqueInput,
    @common.Body() body: OrdonnanceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      ordonnances: {
        connect: body,
      },
    };
    await this.service.updateUtilisateur({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/ordonnances")
  async updateOrdonnances(
    @common.Param() params: UtilisateurWhereUniqueInput,
    @common.Body() body: OrdonnanceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      ordonnances: {
        set: body,
      },
    };
    await this.service.updateUtilisateur({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/ordonnances")
  async disconnectOrdonnances(
    @common.Param() params: UtilisateurWhereUniqueInput,
    @common.Body() body: OrdonnanceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      ordonnances: {
        disconnect: body,
      },
    };
    await this.service.updateUtilisateur({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/patients")
  @ApiNestedQuery(PatientFindManyArgs)
  async findPatients(
    @common.Req() request: Request,
    @common.Param() params: UtilisateurWhereUniqueInput
  ): Promise<Patient[]> {
    const query = plainToClass(PatientFindManyArgs, request.query);
    const results = await this.service.findPatients(params.id, {
      ...query,
      select: {
        adresse: true,
        createdAt: true,

        createur: {
          select: {
            id: true,
          },
        },

        dateNaissance: true,

        hopital: {
          select: {
            id: true,
          },
        },

        id: true,
        nom: true,
        prenom: true,
        sexe: true,
        telephone: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/patients")
  async connectPatients(
    @common.Param() params: UtilisateurWhereUniqueInput,
    @common.Body() body: PatientWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      patients: {
        connect: body,
      },
    };
    await this.service.updateUtilisateur({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/patients")
  async updatePatients(
    @common.Param() params: UtilisateurWhereUniqueInput,
    @common.Body() body: PatientWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      patients: {
        set: body,
      },
    };
    await this.service.updateUtilisateur({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/patients")
  async disconnectPatients(
    @common.Param() params: UtilisateurWhereUniqueInput,
    @common.Body() body: PatientWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      patients: {
        disconnect: body,
      },
    };
    await this.service.updateUtilisateur({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/rendezVous")
  @ApiNestedQuery(RendezVousFindManyArgs)
  async findRendezVous(
    @common.Req() request: Request,
    @common.Param() params: UtilisateurWhereUniqueInput
  ): Promise<RendezVous[]> {
    const query = plainToClass(RendezVousFindManyArgs, request.query);
    const results = await this.service.findRendezVous(params.id, {
      ...query,
      select: {
        createdAt: true,

        createur: {
          select: {
            id: true,
          },
        },

        date: true,
        id: true,
        motif: true,

        patient: {
          select: {
            id: true,
          },
        },

        statut: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/rendezVous")
  async connectRendezVous(
    @common.Param() params: UtilisateurWhereUniqueInput,
    @common.Body() body: RendezVousWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      rendezVous: {
        connect: body,
      },
    };
    await this.service.updateUtilisateur({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/rendezVous")
  async updateRendezVous(
    @common.Param() params: UtilisateurWhereUniqueInput,
    @common.Body() body: RendezVousWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      rendezVous: {
        set: body,
      },
    };
    await this.service.updateUtilisateur({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/rendezVous")
  async disconnectRendezVous(
    @common.Param() params: UtilisateurWhereUniqueInput,
    @common.Body() body: RendezVousWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      rendezVous: {
        disconnect: body,
      },
    };
    await this.service.updateUtilisateur({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/retraitsStock")
  @ApiNestedQuery(RetraitStockFindManyArgs)
  async findRetraitsStock(
    @common.Req() request: Request,
    @common.Param() params: UtilisateurWhereUniqueInput
  ): Promise<RetraitStock[]> {
    const query = plainToClass(RetraitStockFindManyArgs, request.query);
    const results = await this.service.findRetraitsStock(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,

        medicament: {
          select: {
            id: true,
          },
        },

        motif: true,
        quantite: true,
        type: true,

        utilisateur: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/retraitsStock")
  async connectRetraitsStock(
    @common.Param() params: UtilisateurWhereUniqueInput,
    @common.Body() body: RetraitStockWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      retraitsStock: {
        connect: body,
      },
    };
    await this.service.updateUtilisateur({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/retraitsStock")
  async updateRetraitsStock(
    @common.Param() params: UtilisateurWhereUniqueInput,
    @common.Body() body: RetraitStockWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      retraitsStock: {
        set: body,
      },
    };
    await this.service.updateUtilisateur({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/retraitsStock")
  async disconnectRetraitsStock(
    @common.Param() params: UtilisateurWhereUniqueInput,
    @common.Body() body: RetraitStockWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      retraitsStock: {
        disconnect: body,
      },
    };
    await this.service.updateUtilisateur({
      where: params,
      data,
      select: { id: true },
    });
  }
}

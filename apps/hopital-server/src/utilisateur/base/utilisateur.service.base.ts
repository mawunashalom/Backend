/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Utilisateur as PrismaUtilisateur,
  Depense as PrismaDepense,
  DossierMedical as PrismaDossierMedical,
  HistoriqueAction as PrismaHistoriqueAction,
  Ordonnance as PrismaOrdonnance,
  Patient as PrismaPatient,
  RendezVous as PrismaRendezVous,
  RetraitStock as PrismaRetraitStock,
  Dgtcp as PrismaDgtcp,
  Hopital as PrismaHopital,
} from "@prisma/client";

export class UtilisateurServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.UtilisateurCountArgs, "select">
  ): Promise<number> {
    return this.prisma.utilisateur.count(args);
  }

  async utilisateurs(
    args: Prisma.UtilisateurFindManyArgs
  ): Promise<PrismaUtilisateur[]> {
    return this.prisma.utilisateur.findMany(args);
  }
  async utilisateur(
    args: Prisma.UtilisateurFindUniqueArgs
  ): Promise<PrismaUtilisateur | null> {
    return this.prisma.utilisateur.findUnique(args);
  }
  async createUtilisateur(
    args: Prisma.UtilisateurCreateArgs
  ): Promise<PrismaUtilisateur> {
    return this.prisma.utilisateur.create(args);
  }
  async updateUtilisateur(
    args: Prisma.UtilisateurUpdateArgs
  ): Promise<PrismaUtilisateur> {
    return this.prisma.utilisateur.update(args);
  }
  async deleteUtilisateur(
    args: Prisma.UtilisateurDeleteArgs
  ): Promise<PrismaUtilisateur> {
    return this.prisma.utilisateur.delete(args);
  }

  async findDepenses(
    parentId: number,
    args: Prisma.DepenseFindManyArgs
  ): Promise<PrismaDepense[]> {
    return this.prisma.utilisateur
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .depenses(args);
  }

  async findDossiersMedicaux(
    parentId: number,
    args: Prisma.DossierMedicalFindManyArgs
  ): Promise<PrismaDossierMedical[]> {
    return this.prisma.utilisateur
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .dossiersMedicaux(args);
  }

  async findHistoriques(
    parentId: number,
    args: Prisma.HistoriqueActionFindManyArgs
  ): Promise<PrismaHistoriqueAction[]> {
    return this.prisma.utilisateur
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .historiques(args);
  }

  async findOrdonnances(
    parentId: number,
    args: Prisma.OrdonnanceFindManyArgs
  ): Promise<PrismaOrdonnance[]> {
    return this.prisma.utilisateur
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .ordonnances(args);
  }

  async findPatients(
    parentId: number,
    args: Prisma.PatientFindManyArgs
  ): Promise<PrismaPatient[]> {
    return this.prisma.utilisateur
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .patients(args);
  }

  async findRendezVous(
    parentId: number,
    args: Prisma.RendezVousFindManyArgs
  ): Promise<PrismaRendezVous[]> {
    return this.prisma.utilisateur
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .rendezVous(args);
  }

  async findRetraitsStock(
    parentId: number,
    args: Prisma.RetraitStockFindManyArgs
  ): Promise<PrismaRetraitStock[]> {
    return this.prisma.utilisateur
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .retraitsStock(args);
  }

  async getDgtcp(parentId: number): Promise<PrismaDgtcp | null> {
    return this.prisma.utilisateur
      .findUnique({
        where: { id: parentId },
      })
      .dgtcp();
  }

  async getHopital(parentId: number): Promise<PrismaHopital | null> {
    return this.prisma.utilisateur
      .findUnique({
        where: { id: parentId },
      })
      .hopital();
  }
}

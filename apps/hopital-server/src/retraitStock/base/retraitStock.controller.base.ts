/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { RetraitStockService } from "../retraitStock.service";
import { RetraitStockCreateInput } from "./RetraitStockCreateInput";
import { RetraitStock } from "./RetraitStock";
import { RetraitStockFindManyArgs } from "./RetraitStockFindManyArgs";
import { RetraitStockWhereUniqueInput } from "./RetraitStockWhereUniqueInput";
import { RetraitStockUpdateInput } from "./RetraitStockUpdateInput";

export class RetraitStockControllerBase {
  constructor(protected readonly service: RetraitStockService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: RetraitStock })
  async createRetraitStock(
    @common.Body() data: RetraitStockCreateInput
  ): Promise<RetraitStock> {
    return await this.service.createRetraitStock({
      data: {
        ...data,

        medicament: {
          connect: data.medicament,
        },

        utilisateur: {
          connect: data.utilisateur,
        },
      },
      select: {
        createdAt: true,
        id: true,

        medicament: {
          select: {
            id: true,
          },
        },

        motif: true,
        quantite: true,
        type: true,

        utilisateur: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [RetraitStock] })
  @ApiNestedQuery(RetraitStockFindManyArgs)
  async retraitStocks(@common.Req() request: Request): Promise<RetraitStock[]> {
    const args = plainToClass(RetraitStockFindManyArgs, request.query);
    return this.service.retraitStocks({
      ...args,
      select: {
        createdAt: true,
        id: true,

        medicament: {
          select: {
            id: true,
          },
        },

        motif: true,
        quantite: true,
        type: true,

        utilisateur: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: RetraitStock })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async retraitStock(
    @common.Param() params: RetraitStockWhereUniqueInput
  ): Promise<RetraitStock | null> {
    const result = await this.service.retraitStock({
      where: params,
      select: {
        createdAt: true,
        id: true,

        medicament: {
          select: {
            id: true,
          },
        },

        motif: true,
        quantite: true,
        type: true,

        utilisateur: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: RetraitStock })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateRetraitStock(
    @common.Param() params: RetraitStockWhereUniqueInput,
    @common.Body() data: RetraitStockUpdateInput
  ): Promise<RetraitStock | null> {
    try {
      return await this.service.updateRetraitStock({
        where: params,
        data: {
          ...data,

          medicament: {
            connect: data.medicament,
          },

          utilisateur: {
            connect: data.utilisateur,
          },
        },
        select: {
          createdAt: true,
          id: true,

          medicament: {
            select: {
              id: true,
            },
          },

          motif: true,
          quantite: true,
          type: true,

          utilisateur: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: RetraitStock })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteRetraitStock(
    @common.Param() params: RetraitStockWhereUniqueInput
  ): Promise<RetraitStock | null> {
    try {
      return await this.service.deleteRetraitStock({
        where: params,
        select: {
          createdAt: true,
          id: true,

          medicament: {
            select: {
              id: true,
            },
          },

          motif: true,
          quantite: true,
          type: true,

          utilisateur: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}

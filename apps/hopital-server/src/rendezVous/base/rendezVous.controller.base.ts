/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { RendezVousService } from "../rendezVous.service";
import { RendezVousCreateInput } from "./RendezVousCreateInput";
import { RendezVous } from "./RendezVous";
import { RendezVousFindManyArgs } from "./RendezVousFindManyArgs";
import { RendezVousWhereUniqueInput } from "./RendezVousWhereUniqueInput";
import { RendezVousUpdateInput } from "./RendezVousUpdateInput";

export class RendezVousControllerBase {
  constructor(protected readonly service: RendezVousService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: RendezVous })
  async createRendezVous(
    @common.Body() data: RendezVousCreateInput
  ): Promise<RendezVous> {
    return await this.service.createRendezVous({
      data: {
        ...data,

        createur: {
          connect: data.createur,
        },

        patient: {
          connect: data.patient,
        },
      },
      select: {
        createdAt: true,

        createur: {
          select: {
            id: true,
          },
        },

        date: true,
        id: true,
        motif: true,

        patient: {
          select: {
            id: true,
          },
        },

        statut: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [RendezVous] })
  @ApiNestedQuery(RendezVousFindManyArgs)
  async rendezVousItems(@common.Req() request: Request): Promise<RendezVous[]> {
    const args = plainToClass(RendezVousFindManyArgs, request.query);
    return this.service.rendezVousItems({
      ...args,
      select: {
        createdAt: true,

        createur: {
          select: {
            id: true,
          },
        },

        date: true,
        id: true,
        motif: true,

        patient: {
          select: {
            id: true,
          },
        },

        statut: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: RendezVous })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async rendezVous(
    @common.Param() params: RendezVousWhereUniqueInput
  ): Promise<RendezVous | null> {
    const result = await this.service.rendezVous({
      where: params,
      select: {
        createdAt: true,

        createur: {
          select: {
            id: true,
          },
        },

        date: true,
        id: true,
        motif: true,

        patient: {
          select: {
            id: true,
          },
        },

        statut: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: RendezVous })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateRendezVous(
    @common.Param() params: RendezVousWhereUniqueInput,
    @common.Body() data: RendezVousUpdateInput
  ): Promise<RendezVous | null> {
    try {
      return await this.service.updateRendezVous({
        where: params,
        data: {
          ...data,

          createur: {
            connect: data.createur,
          },

          patient: {
            connect: data.patient,
          },
        },
        select: {
          createdAt: true,

          createur: {
            select: {
              id: true,
            },
          },

          date: true,
          id: true,
          motif: true,

          patient: {
            select: {
              id: true,
            },
          },

          statut: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: RendezVous })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteRendezVous(
    @common.Param() params: RendezVousWhereUniqueInput
  ): Promise<RendezVous | null> {
    try {
      return await this.service.deleteRendezVous({
        where: params,
        select: {
          createdAt: true,

          createur: {
            select: {
              id: true,
            },
          },

          date: true,
          id: true,
          motif: true,

          patient: {
            select: {
              id: true,
            },
          },

          statut: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}

/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { RendezVous } from "./RendezVous";
import { RendezVousCountArgs } from "./RendezVousCountArgs";
import { RendezVousFindManyArgs } from "./RendezVousFindManyArgs";
import { RendezVousFindUniqueArgs } from "./RendezVousFindUniqueArgs";
import { CreateRendezVousArgs } from "./CreateRendezVousArgs";
import { UpdateRendezVousArgs } from "./UpdateRendezVousArgs";
import { DeleteRendezVousArgs } from "./DeleteRendezVousArgs";
import { Utilisateur } from "../../utilisateur/base/Utilisateur";
import { Patient } from "../../patient/base/Patient";
import { RendezVousService } from "../rendezVous.service";
@graphql.Resolver(() => RendezVous)
export class RendezVousResolverBase {
  constructor(protected readonly service: RendezVousService) {}

  async _rendezVousItemsMeta(
    @graphql.Args() args: RendezVousCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [RendezVous])
  async rendezVousItems(
    @graphql.Args() args: RendezVousFindManyArgs
  ): Promise<RendezVous[]> {
    return this.service.rendezVousItems(args);
  }

  @graphql.Query(() => RendezVous, { nullable: true })
  async rendezVous(
    @graphql.Args() args: RendezVousFindUniqueArgs
  ): Promise<RendezVous | null> {
    const result = await this.service.rendezVous(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => RendezVous)
  async createRendezVous(
    @graphql.Args() args: CreateRendezVousArgs
  ): Promise<RendezVous> {
    return await this.service.createRendezVous({
      ...args,
      data: {
        ...args.data,

        createur: {
          connect: args.data.createur,
        },

        patient: {
          connect: args.data.patient,
        },
      },
    });
  }

  @graphql.Mutation(() => RendezVous)
  async updateRendezVous(
    @graphql.Args() args: UpdateRendezVousArgs
  ): Promise<RendezVous | null> {
    try {
      return await this.service.updateRendezVous({
        ...args,
        data: {
          ...args.data,

          createur: {
            connect: args.data.createur,
          },

          patient: {
            connect: args.data.patient,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => RendezVous)
  async deleteRendezVous(
    @graphql.Args() args: DeleteRendezVousArgs
  ): Promise<RendezVous | null> {
    try {
      return await this.service.deleteRendezVous(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Utilisateur, {
    nullable: true,
    name: "createur",
  })
  async getCreateur(
    @graphql.Parent() parent: RendezVous
  ): Promise<Utilisateur | null> {
    const result = await this.service.getCreateur(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Patient, {
    nullable: true,
    name: "patient",
  })
  async getPatient(
    @graphql.Parent() parent: RendezVous
  ): Promise<Patient | null> {
    const result = await this.service.getPatient(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}

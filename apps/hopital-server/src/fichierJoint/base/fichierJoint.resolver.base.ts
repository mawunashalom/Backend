/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { FichierJoint } from "./FichierJoint";
import { FichierJointCountArgs } from "./FichierJointCountArgs";
import { FichierJointFindManyArgs } from "./FichierJointFindManyArgs";
import { FichierJointFindUniqueArgs } from "./FichierJointFindUniqueArgs";
import { CreateFichierJointArgs } from "./CreateFichierJointArgs";
import { UpdateFichierJointArgs } from "./UpdateFichierJointArgs";
import { DeleteFichierJointArgs } from "./DeleteFichierJointArgs";
import { DossierMedical } from "../../dossierMedical/base/DossierMedical";
import { FichierJointService } from "../fichierJoint.service";
@graphql.Resolver(() => FichierJoint)
export class FichierJointResolverBase {
  constructor(protected readonly service: FichierJointService) {}

  async _fichierJointsMeta(
    @graphql.Args() args: FichierJointCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [FichierJoint])
  async fichierJoints(
    @graphql.Args() args: FichierJointFindManyArgs
  ): Promise<FichierJoint[]> {
    return this.service.fichierJoints(args);
  }

  @graphql.Query(() => FichierJoint, { nullable: true })
  async fichierJoint(
    @graphql.Args() args: FichierJointFindUniqueArgs
  ): Promise<FichierJoint | null> {
    const result = await this.service.fichierJoint(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => FichierJoint)
  async createFichierJoint(
    @graphql.Args() args: CreateFichierJointArgs
  ): Promise<FichierJoint> {
    return await this.service.createFichierJoint({
      ...args,
      data: {
        ...args.data,

        dossier: {
          connect: args.data.dossier,
        },
      },
    });
  }

  @graphql.Mutation(() => FichierJoint)
  async updateFichierJoint(
    @graphql.Args() args: UpdateFichierJointArgs
  ): Promise<FichierJoint | null> {
    try {
      return await this.service.updateFichierJoint({
        ...args,
        data: {
          ...args.data,

          dossier: {
            connect: args.data.dossier,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => FichierJoint)
  async deleteFichierJoint(
    @graphql.Args() args: DeleteFichierJointArgs
  ): Promise<FichierJoint | null> {
    try {
      return await this.service.deleteFichierJoint(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => DossierMedical, {
    nullable: true,
    name: "dossier",
  })
  async getDossier(
    @graphql.Parent() parent: FichierJoint
  ): Promise<DossierMedical | null> {
    const result = await this.service.getDossier(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}

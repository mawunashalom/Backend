/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  FichierJoint as PrismaFichierJoint,
  DossierMedical as PrismaDossierMedical,
} from "@prisma/client";

export class FichierJointServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.FichierJointCountArgs, "select">
  ): Promise<number> {
    return this.prisma.fichierJoint.count(args);
  }

  async fichierJoints(
    args: Prisma.FichierJointFindManyArgs
  ): Promise<PrismaFichierJoint[]> {
    return this.prisma.fichierJoint.findMany(args);
  }
  async fichierJoint(
    args: Prisma.FichierJointFindUniqueArgs
  ): Promise<PrismaFichierJoint | null> {
    return this.prisma.fichierJoint.findUnique(args);
  }
  async createFichierJoint(
    args: Prisma.FichierJointCreateArgs
  ): Promise<PrismaFichierJoint> {
    return this.prisma.fichierJoint.create(args);
  }
  async updateFichierJoint(
    args: Prisma.FichierJointUpdateArgs
  ): Promise<PrismaFichierJoint> {
    return this.prisma.fichierJoint.update(args);
  }
  async deleteFichierJoint(
    args: Prisma.FichierJointDeleteArgs
  ): Promise<PrismaFichierJoint> {
    return this.prisma.fichierJoint.delete(args);
  }

  async getDossier(parentId: number): Promise<PrismaDossierMedical | null> {
    return this.prisma.fichierJoint
      .findUnique({
        where: { id: parentId },
      })
      .dossier();
  }
}

/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Depense as PrismaDepense,
  Hopital as PrismaHopital,
  Utilisateur as PrismaUtilisateur,
} from "@prisma/client";

export class DepenseServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.DepenseCountArgs, "select">): Promise<number> {
    return this.prisma.depense.count(args);
  }

  async depenses(args: Prisma.DepenseFindManyArgs): Promise<PrismaDepense[]> {
    return this.prisma.depense.findMany(args);
  }
  async depense(
    args: Prisma.DepenseFindUniqueArgs
  ): Promise<PrismaDepense | null> {
    return this.prisma.depense.findUnique(args);
  }
  async createDepense(args: Prisma.DepenseCreateArgs): Promise<PrismaDepense> {
    return this.prisma.depense.create(args);
  }
  async updateDepense(args: Prisma.DepenseUpdateArgs): Promise<PrismaDepense> {
    return this.prisma.depense.update(args);
  }
  async deleteDepense(args: Prisma.DepenseDeleteArgs): Promise<PrismaDepense> {
    return this.prisma.depense.delete(args);
  }

  async getHopital(parentId: number): Promise<PrismaHopital | null> {
    return this.prisma.depense
      .findUnique({
        where: { id: parentId },
      })
      .hopital();
  }

  async getUtilisateur(parentId: number): Promise<PrismaUtilisateur | null> {
    return this.prisma.depense
      .findUnique({
        where: { id: parentId },
      })
      .utilisateur();
  }
}

/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { DossierMedical } from "./DossierMedical";
import { DossierMedicalCountArgs } from "./DossierMedicalCountArgs";
import { DossierMedicalFindManyArgs } from "./DossierMedicalFindManyArgs";
import { DossierMedicalFindUniqueArgs } from "./DossierMedicalFindUniqueArgs";
import { CreateDossierMedicalArgs } from "./CreateDossierMedicalArgs";
import { UpdateDossierMedicalArgs } from "./UpdateDossierMedicalArgs";
import { DeleteDossierMedicalArgs } from "./DeleteDossierMedicalArgs";
import { FichierJointFindManyArgs } from "../../fichierJoint/base/FichierJointFindManyArgs";
import { FichierJoint } from "../../fichierJoint/base/FichierJoint";
import { OrdonnanceFindManyArgs } from "../../ordonnance/base/OrdonnanceFindManyArgs";
import { Ordonnance } from "../../ordonnance/base/Ordonnance";
import { Patient } from "../../patient/base/Patient";
import { Utilisateur } from "../../utilisateur/base/Utilisateur";
import { DossierMedicalService } from "../dossierMedical.service";
@graphql.Resolver(() => DossierMedical)
export class DossierMedicalResolverBase {
  constructor(protected readonly service: DossierMedicalService) {}

  async _dossierMedicalsMeta(
    @graphql.Args() args: DossierMedicalCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [DossierMedical])
  async dossierMedicals(
    @graphql.Args() args: DossierMedicalFindManyArgs
  ): Promise<DossierMedical[]> {
    return this.service.dossierMedicals(args);
  }

  @graphql.Query(() => DossierMedical, { nullable: true })
  async dossierMedical(
    @graphql.Args() args: DossierMedicalFindUniqueArgs
  ): Promise<DossierMedical | null> {
    const result = await this.service.dossierMedical(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => DossierMedical)
  async createDossierMedical(
    @graphql.Args() args: CreateDossierMedicalArgs
  ): Promise<DossierMedical> {
    return await this.service.createDossierMedical({
      ...args,
      data: {
        ...args.data,

        patient: {
          connect: args.data.patient,
        },

        utilisateur: {
          connect: args.data.utilisateur,
        },
      },
    });
  }

  @graphql.Mutation(() => DossierMedical)
  async updateDossierMedical(
    @graphql.Args() args: UpdateDossierMedicalArgs
  ): Promise<DossierMedical | null> {
    try {
      return await this.service.updateDossierMedical({
        ...args,
        data: {
          ...args.data,

          patient: {
            connect: args.data.patient,
          },

          utilisateur: {
            connect: args.data.utilisateur,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => DossierMedical)
  async deleteDossierMedical(
    @graphql.Args() args: DeleteDossierMedicalArgs
  ): Promise<DossierMedical | null> {
    try {
      return await this.service.deleteDossierMedical(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [FichierJoint], { name: "fichiers" })
  async findFichiers(
    @graphql.Parent() parent: DossierMedical,
    @graphql.Args() args: FichierJointFindManyArgs
  ): Promise<FichierJoint[]> {
    const results = await this.service.findFichiers(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Ordonnance], { name: "ordonnances" })
  async findOrdonnances(
    @graphql.Parent() parent: DossierMedical,
    @graphql.Args() args: OrdonnanceFindManyArgs
  ): Promise<Ordonnance[]> {
    const results = await this.service.findOrdonnances(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Patient, {
    nullable: true,
    name: "patient",
  })
  async getPatient(
    @graphql.Parent() parent: DossierMedical
  ): Promise<Patient | null> {
    const result = await this.service.getPatient(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Utilisateur, {
    nullable: true,
    name: "utilisateur",
  })
  async getUtilisateur(
    @graphql.Parent() parent: DossierMedical
  ): Promise<Utilisateur | null> {
    const result = await this.service.getUtilisateur(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}

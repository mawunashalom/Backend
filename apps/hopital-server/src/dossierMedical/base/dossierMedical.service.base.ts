/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  DossierMedical as PrismaDossierMedical,
  FichierJoint as PrismaFichierJoint,
  Ordonnance as PrismaOrdonnance,
  Patient as PrismaPatient,
  Utilisateur as PrismaUtilisateur,
} from "@prisma/client";

export class DossierMedicalServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DossierMedicalCountArgs, "select">
  ): Promise<number> {
    return this.prisma.dossierMedical.count(args);
  }

  async dossierMedicals(
    args: Prisma.DossierMedicalFindManyArgs
  ): Promise<PrismaDossierMedical[]> {
    return this.prisma.dossierMedical.findMany(args);
  }
  async dossierMedical(
    args: Prisma.DossierMedicalFindUniqueArgs
  ): Promise<PrismaDossierMedical | null> {
    return this.prisma.dossierMedical.findUnique(args);
  }
  async createDossierMedical(
    args: Prisma.DossierMedicalCreateArgs
  ): Promise<PrismaDossierMedical> {
    return this.prisma.dossierMedical.create(args);
  }
  async updateDossierMedical(
    args: Prisma.DossierMedicalUpdateArgs
  ): Promise<PrismaDossierMedical> {
    return this.prisma.dossierMedical.update(args);
  }
  async deleteDossierMedical(
    args: Prisma.DossierMedicalDeleteArgs
  ): Promise<PrismaDossierMedical> {
    return this.prisma.dossierMedical.delete(args);
  }

  async findFichiers(
    parentId: number,
    args: Prisma.FichierJointFindManyArgs
  ): Promise<PrismaFichierJoint[]> {
    return this.prisma.dossierMedical
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .fichiers(args);
  }

  async findOrdonnances(
    parentId: number,
    args: Prisma.OrdonnanceFindManyArgs
  ): Promise<PrismaOrdonnance[]> {
    return this.prisma.dossierMedical
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .ordonnances(args);
  }

  async getPatient(parentId: number): Promise<PrismaPatient | null> {
    return this.prisma.dossierMedical
      .findUnique({
        where: { id: parentId },
      })
      .patient();
  }

  async getUtilisateur(parentId: number): Promise<PrismaUtilisateur | null> {
    return this.prisma.dossierMedical
      .findUnique({
        where: { id: parentId },
      })
      .utilisateur();
  }
}

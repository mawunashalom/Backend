/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DossierMedicalService } from "../dossierMedical.service";
import { DossierMedicalCreateInput } from "./DossierMedicalCreateInput";
import { DossierMedical } from "./DossierMedical";
import { DossierMedicalFindManyArgs } from "./DossierMedicalFindManyArgs";
import { DossierMedicalWhereUniqueInput } from "./DossierMedicalWhereUniqueInput";
import { DossierMedicalUpdateInput } from "./DossierMedicalUpdateInput";
import { FichierJointFindManyArgs } from "../../fichierJoint/base/FichierJointFindManyArgs";
import { FichierJoint } from "../../fichierJoint/base/FichierJoint";
import { FichierJointWhereUniqueInput } from "../../fichierJoint/base/FichierJointWhereUniqueInput";
import { OrdonnanceFindManyArgs } from "../../ordonnance/base/OrdonnanceFindManyArgs";
import { Ordonnance } from "../../ordonnance/base/Ordonnance";
import { OrdonnanceWhereUniqueInput } from "../../ordonnance/base/OrdonnanceWhereUniqueInput";

export class DossierMedicalControllerBase {
  constructor(protected readonly service: DossierMedicalService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: DossierMedical })
  async createDossierMedical(
    @common.Body() data: DossierMedicalCreateInput
  ): Promise<DossierMedical> {
    return await this.service.createDossierMedical({
      data: {
        ...data,

        patient: {
          connect: data.patient,
        },

        utilisateur: {
          connect: data.utilisateur,
        },
      },
      select: {
        createdAt: true,
        description: true,
        id: true,

        patient: {
          select: {
            id: true,
          },
        },

        utilisateur: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [DossierMedical] })
  @ApiNestedQuery(DossierMedicalFindManyArgs)
  async dossierMedicals(
    @common.Req() request: Request
  ): Promise<DossierMedical[]> {
    const args = plainToClass(DossierMedicalFindManyArgs, request.query);
    return this.service.dossierMedicals({
      ...args,
      select: {
        createdAt: true,
        description: true,
        id: true,

        patient: {
          select: {
            id: true,
          },
        },

        utilisateur: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: DossierMedical })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async dossierMedical(
    @common.Param() params: DossierMedicalWhereUniqueInput
  ): Promise<DossierMedical | null> {
    const result = await this.service.dossierMedical({
      where: params,
      select: {
        createdAt: true,
        description: true,
        id: true,

        patient: {
          select: {
            id: true,
          },
        },

        utilisateur: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: DossierMedical })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDossierMedical(
    @common.Param() params: DossierMedicalWhereUniqueInput,
    @common.Body() data: DossierMedicalUpdateInput
  ): Promise<DossierMedical | null> {
    try {
      return await this.service.updateDossierMedical({
        where: params,
        data: {
          ...data,

          patient: {
            connect: data.patient,
          },

          utilisateur: {
            connect: data.utilisateur,
          },
        },
        select: {
          createdAt: true,
          description: true,
          id: true,

          patient: {
            select: {
              id: true,
            },
          },

          utilisateur: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: DossierMedical })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDossierMedical(
    @common.Param() params: DossierMedicalWhereUniqueInput
  ): Promise<DossierMedical | null> {
    try {
      return await this.service.deleteDossierMedical({
        where: params,
        select: {
          createdAt: true,
          description: true,
          id: true,

          patient: {
            select: {
              id: true,
            },
          },

          utilisateur: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/fichiers")
  @ApiNestedQuery(FichierJointFindManyArgs)
  async findFichiers(
    @common.Req() request: Request,
    @common.Param() params: DossierMedicalWhereUniqueInput
  ): Promise<FichierJoint[]> {
    const query = plainToClass(FichierJointFindManyArgs, request.query);
    const results = await this.service.findFichiers(params.id, {
      ...query,
      select: {
        dossier: {
          select: {
            id: true,
          },
        },

        id: true,
        nom: true,
        url: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/fichiers")
  async connectFichiers(
    @common.Param() params: DossierMedicalWhereUniqueInput,
    @common.Body() body: FichierJointWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      fichiers: {
        connect: body,
      },
    };
    await this.service.updateDossierMedical({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/fichiers")
  async updateFichiers(
    @common.Param() params: DossierMedicalWhereUniqueInput,
    @common.Body() body: FichierJointWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      fichiers: {
        set: body,
      },
    };
    await this.service.updateDossierMedical({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/fichiers")
  async disconnectFichiers(
    @common.Param() params: DossierMedicalWhereUniqueInput,
    @common.Body() body: FichierJointWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      fichiers: {
        disconnect: body,
      },
    };
    await this.service.updateDossierMedical({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/ordonnances")
  @ApiNestedQuery(OrdonnanceFindManyArgs)
  async findOrdonnances(
    @common.Req() request: Request,
    @common.Param() params: DossierMedicalWhereUniqueInput
  ): Promise<Ordonnance[]> {
    const query = plainToClass(OrdonnanceFindManyArgs, request.query);
    const results = await this.service.findOrdonnances(params.id, {
      ...query,
      select: {
        createdAt: true,

        dossier: {
          select: {
            id: true,
          },
        },

        id: true,
        statut: true,

        utilisateur: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/ordonnances")
  async connectOrdonnances(
    @common.Param() params: DossierMedicalWhereUniqueInput,
    @common.Body() body: OrdonnanceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      ordonnances: {
        connect: body,
      },
    };
    await this.service.updateDossierMedical({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/ordonnances")
  async updateOrdonnances(
    @common.Param() params: DossierMedicalWhereUniqueInput,
    @common.Body() body: OrdonnanceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      ordonnances: {
        set: body,
      },
    };
    await this.service.updateDossierMedical({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/ordonnances")
  async disconnectOrdonnances(
    @common.Param() params: DossierMedicalWhereUniqueInput,
    @common.Body() body: OrdonnanceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      ordonnances: {
        disconnect: body,
      },
    };
    await this.service.updateDossierMedical({
      where: params,
      data,
      select: { id: true },
    });
  }
}

/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Employe as PrismaEmploye,
  Hopital as PrismaHopital,
} from "@prisma/client";

export class EmployeServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.EmployeCountArgs, "select">): Promise<number> {
    return this.prisma.employe.count(args);
  }

  async employes(args: Prisma.EmployeFindManyArgs): Promise<PrismaEmploye[]> {
    return this.prisma.employe.findMany(args);
  }
  async employe(
    args: Prisma.EmployeFindUniqueArgs
  ): Promise<PrismaEmploye | null> {
    return this.prisma.employe.findUnique(args);
  }
  async createEmploye(args: Prisma.EmployeCreateArgs): Promise<PrismaEmploye> {
    return this.prisma.employe.create(args);
  }
  async updateEmploye(args: Prisma.EmployeUpdateArgs): Promise<PrismaEmploye> {
    return this.prisma.employe.update(args);
  }
  async deleteEmploye(args: Prisma.EmployeDeleteArgs): Promise<PrismaEmploye> {
    return this.prisma.employe.delete(args);
  }

  async getHopital(parentId: number): Promise<PrismaHopital | null> {
    return this.prisma.employe
      .findUnique({
        where: { id: parentId },
      })
      .hopital();
  }
}

/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Employe } from "./Employe";
import { EmployeCountArgs } from "./EmployeCountArgs";
import { EmployeFindManyArgs } from "./EmployeFindManyArgs";
import { EmployeFindUniqueArgs } from "./EmployeFindUniqueArgs";
import { CreateEmployeArgs } from "./CreateEmployeArgs";
import { UpdateEmployeArgs } from "./UpdateEmployeArgs";
import { DeleteEmployeArgs } from "./DeleteEmployeArgs";
import { Hopital } from "../../hopital/base/Hopital";
import { EmployeService } from "../employe.service";
@graphql.Resolver(() => Employe)
export class EmployeResolverBase {
  constructor(protected readonly service: EmployeService) {}

  async _employesMeta(
    @graphql.Args() args: EmployeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Employe])
  async employes(
    @graphql.Args() args: EmployeFindManyArgs
  ): Promise<Employe[]> {
    return this.service.employes(args);
  }

  @graphql.Query(() => Employe, { nullable: true })
  async employe(
    @graphql.Args() args: EmployeFindUniqueArgs
  ): Promise<Employe | null> {
    const result = await this.service.employe(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Employe)
  async createEmploye(
    @graphql.Args() args: CreateEmployeArgs
  ): Promise<Employe> {
    return await this.service.createEmploye({
      ...args,
      data: {
        ...args.data,

        hopital: {
          connect: args.data.hopital,
        },
      },
    });
  }

  @graphql.Mutation(() => Employe)
  async updateEmploye(
    @graphql.Args() args: UpdateEmployeArgs
  ): Promise<Employe | null> {
    try {
      return await this.service.updateEmploye({
        ...args,
        data: {
          ...args.data,

          hopital: {
            connect: args.data.hopital,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Employe)
  async deleteEmploye(
    @graphql.Args() args: DeleteEmployeArgs
  ): Promise<Employe | null> {
    try {
      return await this.service.deleteEmploye(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Hopital, {
    nullable: true,
    name: "hopital",
  })
  async getHopital(@graphql.Parent() parent: Employe): Promise<Hopital | null> {
    const result = await this.service.getHopital(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}

/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { HopitalService } from "../hopital.service";
import { HopitalCreateInput } from "./HopitalCreateInput";
import { Hopital } from "./Hopital";
import { HopitalFindManyArgs } from "./HopitalFindManyArgs";
import { HopitalWhereUniqueInput } from "./HopitalWhereUniqueInput";
import { HopitalUpdateInput } from "./HopitalUpdateInput";
import { DepenseFindManyArgs } from "../../depense/base/DepenseFindManyArgs";
import { Depense } from "../../depense/base/Depense";
import { DepenseWhereUniqueInput } from "../../depense/base/DepenseWhereUniqueInput";
import { EmployeFindManyArgs } from "../../employe/base/EmployeFindManyArgs";
import { Employe } from "../../employe/base/Employe";
import { EmployeWhereUniqueInput } from "../../employe/base/EmployeWhereUniqueInput";
import { MedicamentFindManyArgs } from "../../medicament/base/MedicamentFindManyArgs";
import { Medicament } from "../../medicament/base/Medicament";
import { MedicamentWhereUniqueInput } from "../../medicament/base/MedicamentWhereUniqueInput";
import { PatientFindManyArgs } from "../../patient/base/PatientFindManyArgs";
import { Patient } from "../../patient/base/Patient";
import { PatientWhereUniqueInput } from "../../patient/base/PatientWhereUniqueInput";
import { UtilisateurFindManyArgs } from "../../utilisateur/base/UtilisateurFindManyArgs";
import { Utilisateur } from "../../utilisateur/base/Utilisateur";
import { UtilisateurWhereUniqueInput } from "../../utilisateur/base/UtilisateurWhereUniqueInput";

export class HopitalControllerBase {
  constructor(protected readonly service: HopitalService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Hopital })
  async createHopital(
    @common.Body() data: HopitalCreateInput
  ): Promise<Hopital> {
    return await this.service.createHopital({
      data: data,
      select: {
        createdAt: true,
        id: true,
        nom: true,
        statut: true,
        updatedAt: true,
        ville: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Hopital] })
  @ApiNestedQuery(HopitalFindManyArgs)
  async hopitals(@common.Req() request: Request): Promise<Hopital[]> {
    const args = plainToClass(HopitalFindManyArgs, request.query);
    return this.service.hopitals({
      ...args,
      select: {
        createdAt: true,
        id: true,
        nom: true,
        statut: true,
        updatedAt: true,
        ville: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Hopital })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async hopital(
    @common.Param() params: HopitalWhereUniqueInput
  ): Promise<Hopital | null> {
    const result = await this.service.hopital({
      where: params,
      select: {
        createdAt: true,
        id: true,
        nom: true,
        statut: true,
        updatedAt: true,
        ville: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Hopital })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateHopital(
    @common.Param() params: HopitalWhereUniqueInput,
    @common.Body() data: HopitalUpdateInput
  ): Promise<Hopital | null> {
    try {
      return await this.service.updateHopital({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          nom: true,
          statut: true,
          updatedAt: true,
          ville: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Hopital })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteHopital(
    @common.Param() params: HopitalWhereUniqueInput
  ): Promise<Hopital | null> {
    try {
      return await this.service.deleteHopital({
        where: params,
        select: {
          createdAt: true,
          id: true,
          nom: true,
          statut: true,
          updatedAt: true,
          ville: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/depenses")
  @ApiNestedQuery(DepenseFindManyArgs)
  async findDepenses(
    @common.Req() request: Request,
    @common.Param() params: HopitalWhereUniqueInput
  ): Promise<Depense[]> {
    const query = plainToClass(DepenseFindManyArgs, request.query);
    const results = await this.service.findDepenses(params.id, {
      ...query,
      select: {
        date: true,

        hopital: {
          select: {
            id: true,
          },
        },

        id: true,
        montant: true,
        motif: true,

        utilisateur: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/depenses")
  async connectDepenses(
    @common.Param() params: HopitalWhereUniqueInput,
    @common.Body() body: DepenseWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      depenses: {
        connect: body,
      },
    };
    await this.service.updateHopital({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/depenses")
  async updateDepenses(
    @common.Param() params: HopitalWhereUniqueInput,
    @common.Body() body: DepenseWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      depenses: {
        set: body,
      },
    };
    await this.service.updateHopital({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/depenses")
  async disconnectDepenses(
    @common.Param() params: HopitalWhereUniqueInput,
    @common.Body() body: DepenseWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      depenses: {
        disconnect: body,
      },
    };
    await this.service.updateHopital({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/employes")
  @ApiNestedQuery(EmployeFindManyArgs)
  async findEmployes(
    @common.Req() request: Request,
    @common.Param() params: HopitalWhereUniqueInput
  ): Promise<Employe[]> {
    const query = plainToClass(EmployeFindManyArgs, request.query);
    const results = await this.service.findEmployes(params.id, {
      ...query,
      select: {
        adresse: true,
        agents: true,
        contactUrgence: true,
        createdAt: true,
        email: true,

        hopital: {
          select: {
            id: true,
          },
        },

        id: true,
        nom: true,
        poste: true,
        prenom: true,
        sexe: true,
        statut: true,
        telephone: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/employes")
  async connectEmployes(
    @common.Param() params: HopitalWhereUniqueInput,
    @common.Body() body: EmployeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employes: {
        connect: body,
      },
    };
    await this.service.updateHopital({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/employes")
  async updateEmployes(
    @common.Param() params: HopitalWhereUniqueInput,
    @common.Body() body: EmployeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employes: {
        set: body,
      },
    };
    await this.service.updateHopital({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/employes")
  async disconnectEmployes(
    @common.Param() params: HopitalWhereUniqueInput,
    @common.Body() body: EmployeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employes: {
        disconnect: body,
      },
    };
    await this.service.updateHopital({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/medicaments")
  @ApiNestedQuery(MedicamentFindManyArgs)
  async findMedicaments(
    @common.Req() request: Request,
    @common.Param() params: HopitalWhereUniqueInput
  ): Promise<Medicament[]> {
    const query = plainToClass(MedicamentFindManyArgs, request.query);
    const results = await this.service.findMedicaments(params.id, {
      ...query,
      select: {
        hopital: {
          select: {
            id: true,
          },
        },

        id: true,
        nom: true,
        quantite: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/medicaments")
  async connectMedicaments(
    @common.Param() params: HopitalWhereUniqueInput,
    @common.Body() body: MedicamentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      medicaments: {
        connect: body,
      },
    };
    await this.service.updateHopital({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/medicaments")
  async updateMedicaments(
    @common.Param() params: HopitalWhereUniqueInput,
    @common.Body() body: MedicamentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      medicaments: {
        set: body,
      },
    };
    await this.service.updateHopital({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/medicaments")
  async disconnectMedicaments(
    @common.Param() params: HopitalWhereUniqueInput,
    @common.Body() body: MedicamentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      medicaments: {
        disconnect: body,
      },
    };
    await this.service.updateHopital({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/patients")
  @ApiNestedQuery(PatientFindManyArgs)
  async findPatients(
    @common.Req() request: Request,
    @common.Param() params: HopitalWhereUniqueInput
  ): Promise<Patient[]> {
    const query = plainToClass(PatientFindManyArgs, request.query);
    const results = await this.service.findPatients(params.id, {
      ...query,
      select: {
        adresse: true,
        createdAt: true,

        createur: {
          select: {
            id: true,
          },
        },

        dateNaissance: true,

        hopital: {
          select: {
            id: true,
          },
        },

        id: true,
        nom: true,
        prenom: true,
        sexe: true,
        telephone: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/patients")
  async connectPatients(
    @common.Param() params: HopitalWhereUniqueInput,
    @common.Body() body: PatientWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      patients: {
        connect: body,
      },
    };
    await this.service.updateHopital({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/patients")
  async updatePatients(
    @common.Param() params: HopitalWhereUniqueInput,
    @common.Body() body: PatientWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      patients: {
        set: body,
      },
    };
    await this.service.updateHopital({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/patients")
  async disconnectPatients(
    @common.Param() params: HopitalWhereUniqueInput,
    @common.Body() body: PatientWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      patients: {
        disconnect: body,
      },
    };
    await this.service.updateHopital({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/utilisateurs")
  @ApiNestedQuery(UtilisateurFindManyArgs)
  async findUtilisateurs(
    @common.Req() request: Request,
    @common.Param() params: HopitalWhereUniqueInput
  ): Promise<Utilisateur[]> {
    const query = plainToClass(UtilisateurFindManyArgs, request.query);
    const results = await this.service.findUtilisateurs(params.id, {
      ...query,
      select: {
        createdAt: true,

        dgtcp: {
          select: {
            id: true,
          },
        },

        email: true,

        hopital: {
          select: {
            id: true,
          },
        },

        id: true,
        motDePasse: true,
        nom: true,
        prenom: true,
        role: true,
        statut: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/utilisateurs")
  async connectUtilisateurs(
    @common.Param() params: HopitalWhereUniqueInput,
    @common.Body() body: UtilisateurWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      utilisateurs: {
        connect: body,
      },
    };
    await this.service.updateHopital({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/utilisateurs")
  async updateUtilisateurs(
    @common.Param() params: HopitalWhereUniqueInput,
    @common.Body() body: UtilisateurWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      utilisateurs: {
        set: body,
      },
    };
    await this.service.updateHopital({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/utilisateurs")
  async disconnectUtilisateurs(
    @common.Param() params: HopitalWhereUniqueInput,
    @common.Body() body: UtilisateurWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      utilisateurs: {
        disconnect: body,
      },
    };
    await this.service.updateHopital({
      where: params,
      data,
      select: { id: true },
    });
  }
}

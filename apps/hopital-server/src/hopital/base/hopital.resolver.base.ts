/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Hopital } from "./Hopital";
import { HopitalCountArgs } from "./HopitalCountArgs";
import { HopitalFindManyArgs } from "./HopitalFindManyArgs";
import { HopitalFindUniqueArgs } from "./HopitalFindUniqueArgs";
import { CreateHopitalArgs } from "./CreateHopitalArgs";
import { UpdateHopitalArgs } from "./UpdateHopitalArgs";
import { DeleteHopitalArgs } from "./DeleteHopitalArgs";
import { DepenseFindManyArgs } from "../../depense/base/DepenseFindManyArgs";
import { Depense } from "../../depense/base/Depense";
import { EmployeFindManyArgs } from "../../employe/base/EmployeFindManyArgs";
import { Employe } from "../../employe/base/Employe";
import { MedicamentFindManyArgs } from "../../medicament/base/MedicamentFindManyArgs";
import { Medicament } from "../../medicament/base/Medicament";
import { PatientFindManyArgs } from "../../patient/base/PatientFindManyArgs";
import { Patient } from "../../patient/base/Patient";
import { UtilisateurFindManyArgs } from "../../utilisateur/base/UtilisateurFindManyArgs";
import { Utilisateur } from "../../utilisateur/base/Utilisateur";
import { HopitalService } from "../hopital.service";
@graphql.Resolver(() => Hopital)
export class HopitalResolverBase {
  constructor(protected readonly service: HopitalService) {}

  async _hopitalsMeta(
    @graphql.Args() args: HopitalCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Hopital])
  async hopitals(
    @graphql.Args() args: HopitalFindManyArgs
  ): Promise<Hopital[]> {
    return this.service.hopitals(args);
  }

  @graphql.Query(() => Hopital, { nullable: true })
  async hopital(
    @graphql.Args() args: HopitalFindUniqueArgs
  ): Promise<Hopital | null> {
    const result = await this.service.hopital(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Hopital)
  async createHopital(
    @graphql.Args() args: CreateHopitalArgs
  ): Promise<Hopital> {
    return await this.service.createHopital({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Hopital)
  async updateHopital(
    @graphql.Args() args: UpdateHopitalArgs
  ): Promise<Hopital | null> {
    try {
      return await this.service.updateHopital({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Hopital)
  async deleteHopital(
    @graphql.Args() args: DeleteHopitalArgs
  ): Promise<Hopital | null> {
    try {
      return await this.service.deleteHopital(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Depense], { name: "depenses" })
  async findDepenses(
    @graphql.Parent() parent: Hopital,
    @graphql.Args() args: DepenseFindManyArgs
  ): Promise<Depense[]> {
    const results = await this.service.findDepenses(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Employe], { name: "employes" })
  async findEmployes(
    @graphql.Parent() parent: Hopital,
    @graphql.Args() args: EmployeFindManyArgs
  ): Promise<Employe[]> {
    const results = await this.service.findEmployes(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Medicament], { name: "medicaments" })
  async findMedicaments(
    @graphql.Parent() parent: Hopital,
    @graphql.Args() args: MedicamentFindManyArgs
  ): Promise<Medicament[]> {
    const results = await this.service.findMedicaments(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Patient], { name: "patients" })
  async findPatients(
    @graphql.Parent() parent: Hopital,
    @graphql.Args() args: PatientFindManyArgs
  ): Promise<Patient[]> {
    const results = await this.service.findPatients(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Utilisateur], { name: "utilisateurs" })
  async findUtilisateurs(
    @graphql.Parent() parent: Hopital,
    @graphql.Args() args: UtilisateurFindManyArgs
  ): Promise<Utilisateur[]> {
    const results = await this.service.findUtilisateurs(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}

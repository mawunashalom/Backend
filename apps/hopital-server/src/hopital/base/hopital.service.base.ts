/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Hopital as PrismaHopital,
  Depense as PrismaDepense,
  Employe as PrismaEmploye,
  Medicament as PrismaMedicament,
  Patient as PrismaPatient,
  Utilisateur as PrismaUtilisateur,
} from "@prisma/client";

export class HopitalServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.HopitalCountArgs, "select">): Promise<number> {
    return this.prisma.hopital.count(args);
  }

  async hopitals(args: Prisma.HopitalFindManyArgs): Promise<PrismaHopital[]> {
    return this.prisma.hopital.findMany(args);
  }
  async hopital(
    args: Prisma.HopitalFindUniqueArgs
  ): Promise<PrismaHopital | null> {
    return this.prisma.hopital.findUnique(args);
  }
  async createHopital(args: Prisma.HopitalCreateArgs): Promise<PrismaHopital> {
    return this.prisma.hopital.create(args);
  }
  async updateHopital(args: Prisma.HopitalUpdateArgs): Promise<PrismaHopital> {
    return this.prisma.hopital.update(args);
  }
  async deleteHopital(args: Prisma.HopitalDeleteArgs): Promise<PrismaHopital> {
    return this.prisma.hopital.delete(args);
  }

  async findDepenses(
    parentId: number,
    args: Prisma.DepenseFindManyArgs
  ): Promise<PrismaDepense[]> {
    return this.prisma.hopital
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .depenses(args);
  }

  async findEmployes(
    parentId: number,
    args: Prisma.EmployeFindManyArgs
  ): Promise<PrismaEmploye[]> {
    return this.prisma.hopital
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .employes(args);
  }

  async findMedicaments(
    parentId: number,
    args: Prisma.MedicamentFindManyArgs
  ): Promise<PrismaMedicament[]> {
    return this.prisma.hopital
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .medicaments(args);
  }

  async findPatients(
    parentId: number,
    args: Prisma.PatientFindManyArgs
  ): Promise<PrismaPatient[]> {
    return this.prisma.hopital
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .patients(args);
  }

  async findUtilisateurs(
    parentId: number,
    args: Prisma.UtilisateurFindManyArgs
  ): Promise<PrismaUtilisateur[]> {
    return this.prisma.hopital
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .utilisateurs(args);
  }
}

/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Medicament } from "./Medicament";
import { MedicamentCountArgs } from "./MedicamentCountArgs";
import { MedicamentFindManyArgs } from "./MedicamentFindManyArgs";
import { MedicamentFindUniqueArgs } from "./MedicamentFindUniqueArgs";
import { CreateMedicamentArgs } from "./CreateMedicamentArgs";
import { UpdateMedicamentArgs } from "./UpdateMedicamentArgs";
import { DeleteMedicamentArgs } from "./DeleteMedicamentArgs";
import { LigneOrdonnanceFindManyArgs } from "../../ligneOrdonnance/base/LigneOrdonnanceFindManyArgs";
import { LigneOrdonnance } from "../../ligneOrdonnance/base/LigneOrdonnance";
import { RetraitStockFindManyArgs } from "../../retraitStock/base/RetraitStockFindManyArgs";
import { RetraitStock } from "../../retraitStock/base/RetraitStock";
import { Hopital } from "../../hopital/base/Hopital";
import { MedicamentService } from "../medicament.service";
@graphql.Resolver(() => Medicament)
export class MedicamentResolverBase {
  constructor(protected readonly service: MedicamentService) {}

  async _medicamentsMeta(
    @graphql.Args() args: MedicamentCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Medicament])
  async medicaments(
    @graphql.Args() args: MedicamentFindManyArgs
  ): Promise<Medicament[]> {
    return this.service.medicaments(args);
  }

  @graphql.Query(() => Medicament, { nullable: true })
  async medicament(
    @graphql.Args() args: MedicamentFindUniqueArgs
  ): Promise<Medicament | null> {
    const result = await this.service.medicament(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Medicament)
  async createMedicament(
    @graphql.Args() args: CreateMedicamentArgs
  ): Promise<Medicament> {
    return await this.service.createMedicament({
      ...args,
      data: {
        ...args.data,

        hopital: {
          connect: args.data.hopital,
        },
      },
    });
  }

  @graphql.Mutation(() => Medicament)
  async updateMedicament(
    @graphql.Args() args: UpdateMedicamentArgs
  ): Promise<Medicament | null> {
    try {
      return await this.service.updateMedicament({
        ...args,
        data: {
          ...args.data,

          hopital: {
            connect: args.data.hopital,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Medicament)
  async deleteMedicament(
    @graphql.Args() args: DeleteMedicamentArgs
  ): Promise<Medicament | null> {
    try {
      return await this.service.deleteMedicament(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [LigneOrdonnance], { name: "lignes" })
  async findLignes(
    @graphql.Parent() parent: Medicament,
    @graphql.Args() args: LigneOrdonnanceFindManyArgs
  ): Promise<LigneOrdonnance[]> {
    const results = await this.service.findLignes(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [RetraitStock], { name: "retraits" })
  async findRetraits(
    @graphql.Parent() parent: Medicament,
    @graphql.Args() args: RetraitStockFindManyArgs
  ): Promise<RetraitStock[]> {
    const results = await this.service.findRetraits(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Hopital, {
    nullable: true,
    name: "hopital",
  })
  async getHopital(
    @graphql.Parent() parent: Medicament
  ): Promise<Hopital | null> {
    const result = await this.service.getHopital(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}

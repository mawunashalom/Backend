/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { MedicamentService } from "../medicament.service";
import { MedicamentCreateInput } from "./MedicamentCreateInput";
import { Medicament } from "./Medicament";
import { MedicamentFindManyArgs } from "./MedicamentFindManyArgs";
import { MedicamentWhereUniqueInput } from "./MedicamentWhereUniqueInput";
import { MedicamentUpdateInput } from "./MedicamentUpdateInput";
import { LigneOrdonnanceFindManyArgs } from "../../ligneOrdonnance/base/LigneOrdonnanceFindManyArgs";
import { LigneOrdonnance } from "../../ligneOrdonnance/base/LigneOrdonnance";
import { LigneOrdonnanceWhereUniqueInput } from "../../ligneOrdonnance/base/LigneOrdonnanceWhereUniqueInput";
import { RetraitStockFindManyArgs } from "../../retraitStock/base/RetraitStockFindManyArgs";
import { RetraitStock } from "../../retraitStock/base/RetraitStock";
import { RetraitStockWhereUniqueInput } from "../../retraitStock/base/RetraitStockWhereUniqueInput";

export class MedicamentControllerBase {
  constructor(protected readonly service: MedicamentService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Medicament })
  async createMedicament(
    @common.Body() data: MedicamentCreateInput
  ): Promise<Medicament> {
    return await this.service.createMedicament({
      data: {
        ...data,

        hopital: {
          connect: data.hopital,
        },
      },
      select: {
        hopital: {
          select: {
            id: true,
          },
        },

        id: true,
        nom: true,
        quantite: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Medicament] })
  @ApiNestedQuery(MedicamentFindManyArgs)
  async medicaments(@common.Req() request: Request): Promise<Medicament[]> {
    const args = plainToClass(MedicamentFindManyArgs, request.query);
    return this.service.medicaments({
      ...args,
      select: {
        hopital: {
          select: {
            id: true,
          },
        },

        id: true,
        nom: true,
        quantite: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Medicament })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async medicament(
    @common.Param() params: MedicamentWhereUniqueInput
  ): Promise<Medicament | null> {
    const result = await this.service.medicament({
      where: params,
      select: {
        hopital: {
          select: {
            id: true,
          },
        },

        id: true,
        nom: true,
        quantite: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Medicament })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateMedicament(
    @common.Param() params: MedicamentWhereUniqueInput,
    @common.Body() data: MedicamentUpdateInput
  ): Promise<Medicament | null> {
    try {
      return await this.service.updateMedicament({
        where: params,
        data: {
          ...data,

          hopital: {
            connect: data.hopital,
          },
        },
        select: {
          hopital: {
            select: {
              id: true,
            },
          },

          id: true,
          nom: true,
          quantite: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Medicament })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteMedicament(
    @common.Param() params: MedicamentWhereUniqueInput
  ): Promise<Medicament | null> {
    try {
      return await this.service.deleteMedicament({
        where: params,
        select: {
          hopital: {
            select: {
              id: true,
            },
          },

          id: true,
          nom: true,
          quantite: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/lignes")
  @ApiNestedQuery(LigneOrdonnanceFindManyArgs)
  async findLignes(
    @common.Req() request: Request,
    @common.Param() params: MedicamentWhereUniqueInput
  ): Promise<LigneOrdonnance[]> {
    const query = plainToClass(LigneOrdonnanceFindManyArgs, request.query);
    const results = await this.service.findLignes(params.id, {
      ...query,
      select: {
        id: true,

        medicament: {
          select: {
            id: true,
          },
        },

        ordonnance: {
          select: {
            id: true,
          },
        },

        quantite: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/lignes")
  async connectLignes(
    @common.Param() params: MedicamentWhereUniqueInput,
    @common.Body() body: LigneOrdonnanceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      lignes: {
        connect: body,
      },
    };
    await this.service.updateMedicament({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/lignes")
  async updateLignes(
    @common.Param() params: MedicamentWhereUniqueInput,
    @common.Body() body: LigneOrdonnanceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      lignes: {
        set: body,
      },
    };
    await this.service.updateMedicament({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/lignes")
  async disconnectLignes(
    @common.Param() params: MedicamentWhereUniqueInput,
    @common.Body() body: LigneOrdonnanceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      lignes: {
        disconnect: body,
      },
    };
    await this.service.updateMedicament({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/retraits")
  @ApiNestedQuery(RetraitStockFindManyArgs)
  async findRetraits(
    @common.Req() request: Request,
    @common.Param() params: MedicamentWhereUniqueInput
  ): Promise<RetraitStock[]> {
    const query = plainToClass(RetraitStockFindManyArgs, request.query);
    const results = await this.service.findRetraits(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,

        medicament: {
          select: {
            id: true,
          },
        },

        motif: true,
        quantite: true,
        type: true,

        utilisateur: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/retraits")
  async connectRetraits(
    @common.Param() params: MedicamentWhereUniqueInput,
    @common.Body() body: RetraitStockWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      retraits: {
        connect: body,
      },
    };
    await this.service.updateMedicament({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/retraits")
  async updateRetraits(
    @common.Param() params: MedicamentWhereUniqueInput,
    @common.Body() body: RetraitStockWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      retraits: {
        set: body,
      },
    };
    await this.service.updateMedicament({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/retraits")
  async disconnectRetraits(
    @common.Param() params: MedicamentWhereUniqueInput,
    @common.Body() body: RetraitStockWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      retraits: {
        disconnect: body,
      },
    };
    await this.service.updateMedicament({
      where: params,
      data,
      select: { id: true },
    });
  }
}

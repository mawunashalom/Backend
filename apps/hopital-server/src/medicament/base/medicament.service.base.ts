/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Medicament as PrismaMedicament,
  LigneOrdonnance as PrismaLigneOrdonnance,
  RetraitStock as PrismaRetraitStock,
  Hopital as PrismaHopital,
} from "@prisma/client";

export class MedicamentServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.MedicamentCountArgs, "select">
  ): Promise<number> {
    return this.prisma.medicament.count(args);
  }

  async medicaments(
    args: Prisma.MedicamentFindManyArgs
  ): Promise<PrismaMedicament[]> {
    return this.prisma.medicament.findMany(args);
  }
  async medicament(
    args: Prisma.MedicamentFindUniqueArgs
  ): Promise<PrismaMedicament | null> {
    return this.prisma.medicament.findUnique(args);
  }
  async createMedicament(
    args: Prisma.MedicamentCreateArgs
  ): Promise<PrismaMedicament> {
    return this.prisma.medicament.create(args);
  }
  async updateMedicament(
    args: Prisma.MedicamentUpdateArgs
  ): Promise<PrismaMedicament> {
    return this.prisma.medicament.update(args);
  }
  async deleteMedicament(
    args: Prisma.MedicamentDeleteArgs
  ): Promise<PrismaMedicament> {
    return this.prisma.medicament.delete(args);
  }

  async findLignes(
    parentId: number,
    args: Prisma.LigneOrdonnanceFindManyArgs
  ): Promise<PrismaLigneOrdonnance[]> {
    return this.prisma.medicament
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .lignes(args);
  }

  async findRetraits(
    parentId: number,
    args: Prisma.RetraitStockFindManyArgs
  ): Promise<PrismaRetraitStock[]> {
    return this.prisma.medicament
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .retraits(args);
  }

  async getHopital(parentId: number): Promise<PrismaHopital | null> {
    return this.prisma.medicament
      .findUnique({
        where: { id: parentId },
      })
      .hopital();
  }
}

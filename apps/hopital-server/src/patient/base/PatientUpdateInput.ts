/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import {
  IsString,
  MaxLength,
  IsOptional,
  ValidateNested,
  IsDate,
  IsEnum,
} from "class-validator";
import { UtilisateurWhereUniqueInput } from "../../utilisateur/base/UtilisateurWhereUniqueInput";
import { Type } from "class-transformer";
import { DossierMedicalUpdateManyWithoutPatientsInput } from "./DossierMedicalUpdateManyWithoutPatientsInput";
import { HopitalWhereUniqueInput } from "../../hopital/base/HopitalWhereUniqueInput";
import { RendezVousUpdateManyWithoutPatientsInput } from "./RendezVousUpdateManyWithoutPatientsInput";
import { EnumPatientSexe } from "./EnumPatientSexe";

@InputType()
class PatientUpdateInput {
  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  adresse?: string;

  @ApiProperty({
    required: false,
    type: () => UtilisateurWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => UtilisateurWhereUniqueInput)
  @IsOptional()
  @Field(() => UtilisateurWhereUniqueInput, {
    nullable: true,
  })
  createur?: UtilisateurWhereUniqueInput;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  dateNaissance?: Date;

  @ApiProperty({
    required: false,
    type: () => DossierMedicalUpdateManyWithoutPatientsInput,
  })
  @ValidateNested()
  @Type(() => DossierMedicalUpdateManyWithoutPatientsInput)
  @IsOptional()
  @Field(() => DossierMedicalUpdateManyWithoutPatientsInput, {
    nullable: true,
  })
  dossiers?: DossierMedicalUpdateManyWithoutPatientsInput;

  @ApiProperty({
    required: false,
    type: () => HopitalWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => HopitalWhereUniqueInput)
  @IsOptional()
  @Field(() => HopitalWhereUniqueInput, {
    nullable: true,
  })
  hopital?: HopitalWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  nom?: string;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  prenom?: string;

  @ApiProperty({
    required: false,
    type: () => RendezVousUpdateManyWithoutPatientsInput,
  })
  @ValidateNested()
  @Type(() => RendezVousUpdateManyWithoutPatientsInput)
  @IsOptional()
  @Field(() => RendezVousUpdateManyWithoutPatientsInput, {
    nullable: true,
  })
  rendezVous?: RendezVousUpdateManyWithoutPatientsInput;

  @ApiProperty({
    required: false,
    enum: EnumPatientSexe,
  })
  @IsEnum(EnumPatientSexe)
  @IsOptional()
  @Field(() => EnumPatientSexe, {
    nullable: true,
  })
  sexe?: "MASCULIN" | "FEMININ";

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  telephone?: string;
}

export { PatientUpdateInput as PatientUpdateInput };

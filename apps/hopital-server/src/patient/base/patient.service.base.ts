/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Patient as PrismaPatient,
  DossierMedical as PrismaDossierMedical,
  RendezVous as PrismaRendezVous,
  Utilisateur as PrismaUtilisateur,
  Hopital as PrismaHopital,
} from "@prisma/client";

export class PatientServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.PatientCountArgs, "select">): Promise<number> {
    return this.prisma.patient.count(args);
  }

  async patients(args: Prisma.PatientFindManyArgs): Promise<PrismaPatient[]> {
    return this.prisma.patient.findMany(args);
  }
  async patient(
    args: Prisma.PatientFindUniqueArgs
  ): Promise<PrismaPatient | null> {
    return this.prisma.patient.findUnique(args);
  }
  async createPatient(args: Prisma.PatientCreateArgs): Promise<PrismaPatient> {
    return this.prisma.patient.create(args);
  }
  async updatePatient(args: Prisma.PatientUpdateArgs): Promise<PrismaPatient> {
    return this.prisma.patient.update(args);
  }
  async deletePatient(args: Prisma.PatientDeleteArgs): Promise<PrismaPatient> {
    return this.prisma.patient.delete(args);
  }

  async findDossiers(
    parentId: number,
    args: Prisma.DossierMedicalFindManyArgs
  ): Promise<PrismaDossierMedical[]> {
    return this.prisma.patient
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .dossiers(args);
  }

  async findRendezVous(
    parentId: number,
    args: Prisma.RendezVousFindManyArgs
  ): Promise<PrismaRendezVous[]> {
    return this.prisma.patient
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .rendezVous(args);
  }

  async getCreateur(parentId: number): Promise<PrismaUtilisateur | null> {
    return this.prisma.patient
      .findUnique({
        where: { id: parentId },
      })
      .createur();
  }

  async getHopital(parentId: number): Promise<PrismaHopital | null> {
    return this.prisma.patient
      .findUnique({
        where: { id: parentId },
      })
      .hopital();
  }
}

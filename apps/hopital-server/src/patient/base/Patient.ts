/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import {
  IsString,
  MaxLength,
  IsDate,
  ValidateNested,
  IsOptional,
  IsInt,
  IsEnum,
} from "class-validator";
import { Type } from "class-transformer";
import { Utilisateur } from "../../utilisateur/base/Utilisateur";
import { DossierMedical } from "../../dossierMedical/base/DossierMedical";
import { Hopital } from "../../hopital/base/Hopital";
import { RendezVous } from "../../rendezVous/base/RendezVous";
import { EnumPatientSexe } from "./EnumPatientSexe";

@ObjectType()
class Patient {
  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @Field(() => String)
  adresse!: string;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  createdAt!: Date;

  @ApiProperty({
    required: true,
    type: () => Utilisateur,
  })
  @ValidateNested()
  @Type(() => Utilisateur)
  createur?: Utilisateur;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  dateNaissance!: Date;

  @ApiProperty({
    required: false,
    type: () => [DossierMedical],
  })
  @ValidateNested()
  @Type(() => DossierMedical)
  @IsOptional()
  dossiers?: Array<DossierMedical>;

  @ApiProperty({
    required: true,
    type: () => Hopital,
  })
  @ValidateNested()
  @Type(() => Hopital)
  hopital?: Hopital;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsInt()
  @Field(() => Number)
  id!: number;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @Field(() => String)
  nom!: string;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @Field(() => String)
  prenom!: string;

  @ApiProperty({
    required: false,
    type: () => [RendezVous],
  })
  @ValidateNested()
  @Type(() => RendezVous)
  @IsOptional()
  rendezVous?: Array<RendezVous>;

  @ApiProperty({
    required: true,
    enum: EnumPatientSexe,
  })
  @IsEnum(EnumPatientSexe)
  @Field(() => EnumPatientSexe, {
    nullable: true,
  })
  sexe?: "MASCULIN" | "FEMININ";

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @Field(() => String)
  telephone!: string;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  updatedAt!: Date;
}

export { Patient as Patient };

/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PatientService } from "../patient.service";
import { PatientCreateInput } from "./PatientCreateInput";
import { Patient } from "./Patient";
import { PatientFindManyArgs } from "./PatientFindManyArgs";
import { PatientWhereUniqueInput } from "./PatientWhereUniqueInput";
import { PatientUpdateInput } from "./PatientUpdateInput";
import { DossierMedicalFindManyArgs } from "../../dossierMedical/base/DossierMedicalFindManyArgs";
import { DossierMedical } from "../../dossierMedical/base/DossierMedical";
import { DossierMedicalWhereUniqueInput } from "../../dossierMedical/base/DossierMedicalWhereUniqueInput";
import { RendezVousFindManyArgs } from "../../rendezVous/base/RendezVousFindManyArgs";
import { RendezVous } from "../../rendezVous/base/RendezVous";
import { RendezVousWhereUniqueInput } from "../../rendezVous/base/RendezVousWhereUniqueInput";

export class PatientControllerBase {
  constructor(protected readonly service: PatientService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Patient })
  async createPatient(
    @common.Body() data: PatientCreateInput
  ): Promise<Patient> {
    return await this.service.createPatient({
      data: {
        ...data,

        createur: {
          connect: data.createur,
        },

        hopital: {
          connect: data.hopital,
        },
      },
      select: {
        adresse: true,
        createdAt: true,

        createur: {
          select: {
            id: true,
          },
        },

        dateNaissance: true,

        hopital: {
          select: {
            id: true,
          },
        },

        id: true,
        nom: true,
        prenom: true,
        sexe: true,
        telephone: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Patient] })
  @ApiNestedQuery(PatientFindManyArgs)
  async patients(@common.Req() request: Request): Promise<Patient[]> {
    const args = plainToClass(PatientFindManyArgs, request.query);
    return this.service.patients({
      ...args,
      select: {
        adresse: true,
        createdAt: true,

        createur: {
          select: {
            id: true,
          },
        },

        dateNaissance: true,

        hopital: {
          select: {
            id: true,
          },
        },

        id: true,
        nom: true,
        prenom: true,
        sexe: true,
        telephone: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Patient })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async patient(
    @common.Param() params: PatientWhereUniqueInput
  ): Promise<Patient | null> {
    const result = await this.service.patient({
      where: params,
      select: {
        adresse: true,
        createdAt: true,

        createur: {
          select: {
            id: true,
          },
        },

        dateNaissance: true,

        hopital: {
          select: {
            id: true,
          },
        },

        id: true,
        nom: true,
        prenom: true,
        sexe: true,
        telephone: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Patient })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePatient(
    @common.Param() params: PatientWhereUniqueInput,
    @common.Body() data: PatientUpdateInput
  ): Promise<Patient | null> {
    try {
      return await this.service.updatePatient({
        where: params,
        data: {
          ...data,

          createur: {
            connect: data.createur,
          },

          hopital: {
            connect: data.hopital,
          },
        },
        select: {
          adresse: true,
          createdAt: true,

          createur: {
            select: {
              id: true,
            },
          },

          dateNaissance: true,

          hopital: {
            select: {
              id: true,
            },
          },

          id: true,
          nom: true,
          prenom: true,
          sexe: true,
          telephone: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Patient })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePatient(
    @common.Param() params: PatientWhereUniqueInput
  ): Promise<Patient | null> {
    try {
      return await this.service.deletePatient({
        where: params,
        select: {
          adresse: true,
          createdAt: true,

          createur: {
            select: {
              id: true,
            },
          },

          dateNaissance: true,

          hopital: {
            select: {
              id: true,
            },
          },

          id: true,
          nom: true,
          prenom: true,
          sexe: true,
          telephone: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/dossiers")
  @ApiNestedQuery(DossierMedicalFindManyArgs)
  async findDossiers(
    @common.Req() request: Request,
    @common.Param() params: PatientWhereUniqueInput
  ): Promise<DossierMedical[]> {
    const query = plainToClass(DossierMedicalFindManyArgs, request.query);
    const results = await this.service.findDossiers(params.id, {
      ...query,
      select: {
        createdAt: true,
        description: true,
        id: true,

        patient: {
          select: {
            id: true,
          },
        },

        utilisateur: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/dossiers")
  async connectDossiers(
    @common.Param() params: PatientWhereUniqueInput,
    @common.Body() body: DossierMedicalWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      dossiers: {
        connect: body,
      },
    };
    await this.service.updatePatient({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/dossiers")
  async updateDossiers(
    @common.Param() params: PatientWhereUniqueInput,
    @common.Body() body: DossierMedicalWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      dossiers: {
        set: body,
      },
    };
    await this.service.updatePatient({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/dossiers")
  async disconnectDossiers(
    @common.Param() params: PatientWhereUniqueInput,
    @common.Body() body: DossierMedicalWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      dossiers: {
        disconnect: body,
      },
    };
    await this.service.updatePatient({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/rendezVous")
  @ApiNestedQuery(RendezVousFindManyArgs)
  async findRendezVous(
    @common.Req() request: Request,
    @common.Param() params: PatientWhereUniqueInput
  ): Promise<RendezVous[]> {
    const query = plainToClass(RendezVousFindManyArgs, request.query);
    const results = await this.service.findRendezVous(params.id, {
      ...query,
      select: {
        createdAt: true,

        createur: {
          select: {
            id: true,
          },
        },

        date: true,
        id: true,
        motif: true,

        patient: {
          select: {
            id: true,
          },
        },

        statut: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/rendezVous")
  async connectRendezVous(
    @common.Param() params: PatientWhereUniqueInput,
    @common.Body() body: RendezVousWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      rendezVous: {
        connect: body,
      },
    };
    await this.service.updatePatient({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/rendezVous")
  async updateRendezVous(
    @common.Param() params: PatientWhereUniqueInput,
    @common.Body() body: RendezVousWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      rendezVous: {
        set: body,
      },
    };
    await this.service.updatePatient({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/rendezVous")
  async disconnectRendezVous(
    @common.Param() params: PatientWhereUniqueInput,
    @common.Body() body: RendezVousWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      rendezVous: {
        disconnect: body,
      },
    };
    await this.service.updatePatient({
      where: params,
      data,
      select: { id: true },
    });
  }
}
